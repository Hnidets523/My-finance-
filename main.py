import sqlite3
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes, filters,
    ConversationHandler
)

# ====== CONFIG ======
BOT_TOKEN = "8420371366:AAG9UfAnEqKyrk5v1DOPHvh7hlp1ZDtHJy8"  # —Ç–≤—ñ–π —Ç–æ–∫–µ–Ω
ONLY_USER_ID = None  # –º–æ–∂–µ—à –≤–∫–∞–∑–∞—Ç–∏ —Å–≤—ñ–π Telegram ID, —â–æ–± –æ–±–º–µ–∂–∏—Ç–∏ –¥–æ—Å—Ç—É–ø

# –¢–∏–ø–∏ –æ–ø–µ—Ä–∞—Ü—ñ–π
TYPES = ["üí∏ –í–∏—Ç—Ä–∞—Ç–∏", "üí∞ –ù–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è", "üìà –Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]

# –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–∞ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
CATEGORIES = {
    "üí∏ –í–∏—Ç—Ä–∞—Ç–∏": {
        "–•–∞—Ä—á—É–≤–∞–Ω–Ω—è": ["–ö–∞—Ñ–µ", "–°—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç/—Ä–∏–Ω–æ–∫", "–ì—É–ª—å–∫–∏", "–¢—Ä–∞—Ç–∏ –Ω–∞ —Ä–æ–±–æ—Ç—ñ"],
        "–û–¥—è–≥ —Ç–∞ –≤–∑—É—Ç—Ç—è": ["–°–µ–∫–æ–Ω–¥", "–§—ñ–∑–∏—á–Ω–∏–π –º–∞–≥–∞–∑–∏–Ω", "–û–Ω–ª–∞–π–Ω"],
        "–û—Ä–µ–Ω–¥–∞/–∂–∏—Ç–ª–æ": None,
        "–ì–æ—Å–ø–æ–¥–∞—Ä—á—ñ —Ç–æ–≤–∞—Ä–∏": None,
        "–î–æ—Ä–æ–≥–∞/–ø–æ–¥–æ—Ä–æ–∂—ñ": ["–ú–∞—Ä—à—Ä—É—Ç–∫–∏", "–ê–≤—Ç–æ–±—É—Å–∏/–¥–∞–ª—å–Ω—ñ—Å—Ç—å"],
        "–û–Ω–ª–∞–π–Ω –ø—ñ–¥–ø–∏—Å–∫–∏": ["iCloud", "YouTube", "Prom"],
        "–ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –º–æ–±—ñ–ª—å–Ω–æ–≥–æ": None,
        "–†–æ–∑–≤–∞–≥–∏": None,
        "Vodafone": ["–ß–∞–π/–ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è", "–°—ñ–º-–∫–∞—Ä—Ç–∏"],
    },
    "üìà –Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó": {
        "–ö—Ä–∏–ø—Ç–∞": None,
        "–ó–∞—Ä—è–¥–Ω—ñ –ø—Ä–∏—Å—Ç—Ä–æ—ó": None,
        "Hub station": None,
        "–ê–∫–∞—É–Ω—Ç–∏": None,
        "–ö—É–ø—ñ–≤–ª—è $": None,
    },
    "üí∞ –ù–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è": {
        "–ó–∞—Ä–ø–ª–∞—Ç–∞": None,
        "–ü–µ—Ä–µ–∫–∞–∑": None,
        "–Ü–Ω—à–µ": None,
    },
}

CURRENCIES = ["–≥—Ä–Ω", "$"]
STATS_PERIODS = ["üìÖ –°—å–æ–≥–æ–¥–Ω—ñ", "üìÖ –¢–∏–∂–¥–µ–Ω—å", "üìÖ –ú—ñ—Å—è—Ü—å", "‚Ü©Ô∏è –ù–∞–∑–∞–¥"]

# ====== DB ======
DB_PATH = "finance.db"
conn = sqlite3.connect(DB_PATH, check_same_thread=False)
cur = conn.cursor()
cur.execute("""
CREATE TABLE IF NOT EXISTS transactions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    type TEXT,
    category TEXT,
    subcategory TEXT,
    amount REAL,
    currency TEXT,
    comment TEXT,
    date TEXT,
    created_at TEXT
)
""")
conn.commit()

# ====== STATES ======
TYPE, CATEGORY, SUBCATEGORY, AMOUNT, CURRENCY, COMMENT, STATS = range(7)

# ====== KEYBOARDS ======
def kb(rows):
    return ReplyKeyboardMarkup(
        [[KeyboardButton(x) for x in row] for row in rows],
        resize_keyboard=True
    )

def main_menu_kb():
    return kb([TYPES])

def categories_kb(for_type):
    cats = list(CATEGORIES[for_type].keys())
    rows, row = [], []
    for c in cats:
        row.append(c)
        if len(row) == 2:
            rows.append(row)
            row = []
    if row:
        rows.append(row)
    rows.append(["‚Ü©Ô∏è –ù–∞–∑–∞–¥"])
    return kb(rows)

def subcategories_kb(for_type, category):
    subs = CATEGORIES[for_type][category]
    rows = []
    if subs:
        row = []
        for s in subs:
            row.append(s)
            if len(row) == 2:
                rows.append(row)
                row = []
        if row:
            rows.append(row)
    rows.append(["(–±–µ–∑ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó)", "‚Ü©Ô∏è –ù–∞–∑–∞–¥"])
    return kb(rows)

def currencies_kb():
    return kb([CURRENCIES, ["‚Ü©Ô∏è –ù–∞–∑–∞–¥"]])

def stats_kb():
    return kb([STATS_PERIODS])

# ====== DATABASE SAVE ======
def save_tx(user_id, ttype, cat, sub, amount, currency, comment, date_str):
    cur.execute("""
        INSERT INTO transactions (user_id, type, category, subcategory, amount, currency, comment, date, created_at)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
    """, (user_id, ttype, cat, sub, amount, currency, comment, date_str, datetime.utcnow().isoformat()))
    conn.commit()

# ====== HELPERS ======
def get_stats(period: str, user_id: int):
    now = datetime.now()
    if period == "üìÖ –°—å–æ–≥–æ–¥–Ω—ñ":
        start_date = now.strftime("%Y-%m-%d")
        query = """
            SELECT type, currency, SUM(amount)
            FROM transactions
            WHERE user_id=? AND date=?
            GROUP BY type, currency
        """
        params = (user_id, start_date)
    elif period == "üìÖ –¢–∏–∂–¥–µ–Ω—å":
        start_date = (now - timedelta(days=7)).strftime("%Y-%m-%d")
        query = """
            SELECT type, currency, SUM(amount)
            FROM transactions
            WHERE user_id=? AND date>=?
            GROUP BY type, currency
        """
        params = (user_id, start_date)
    elif period == "üìÖ –ú—ñ—Å—è—Ü—å":
        start_date = (now - timedelta(days=30)).strftime("%Y-%m-%d")
        query = """
            SELECT type, currency, SUM(amount)
            FROM transactions
            WHERE user_id=? AND date>=?
            GROUP BY type, currency
        """
        params = (user_id, start_date)
    else:
        return "‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π –ø–µ—Ä—ñ–æ–¥."

    cur.execute(query, params)
    rows = cur.fetchall()
    if not rows:
        return "üì≠ –ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –∑–∞ –æ–±—Ä–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥."

    lines = [f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {period}:\n"]
    by_type = {}
    for t, curr, s in rows:
        by_type.setdefault(t, []).append((curr, s))

    for t, arr in by_type.items():
        parts = [f"{amt:.2f} {curr}" for curr, amt in arr]
        lines.append(f"{t}: " + " + ".join(parts))
    return "\n".join(lines)

# ====== HANDLERS ======
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = (
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø ‚Äî —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –±–æ—Ç, —è–∫–∏–π –¥–æ–ø–æ–º–æ–∂–µ –≤–µ—Å—Ç–∏ –æ–±–ª—ñ–∫ –≤–∏—Ç—Ä–∞—Ç, –¥–æ—Ö–æ–¥—ñ–≤ —Ç–∞ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π.\n\n"
        "–¢—É—Ç —Ç–∏ –º–æ–∂–µ—à:\n"
        "üí∏ –î–æ–¥–∞–≤–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏ —Ç–∞ —Å–æ—Ä—Ç—É–≤–∞—Ç–∏ —ó—Ö –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏\n"
        "üí∞ –§—ñ–∫—Å—É–≤–∞—Ç–∏ –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è\n"
        "üìà –í–µ—Å—Ç–∏ –æ–±–ª—ñ–∫ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π\n"
        "üìä –ü–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–≤–æ—ó—Ö —Ñ—ñ–Ω–∞–Ω—Å—ñ–≤\n\n"
        "–ë–æ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –¥–ª—è –æ—Å–æ–±–∏—Å—Ç–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è.\n"
        "–ó–∞—Å–Ω–æ–≤–Ω–∏–∫: @hnidets011"
    )
    await update.message.reply_text(welcome_text, reply_markup=main_menu_kb())
    return TYPE

async def pick_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    t = update.message.text
    if t == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=stats_kb())
        return STATS
    if t not in TYPES:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ:", reply_markup=main_menu_kb())
        return TYPE
    context.user_data["type"] = t
    await update.message.reply_text("–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=categories_kb(t))
    return CATEGORY

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    period = update.message.text
    if period == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        await update.message.reply_text("–ü–æ–≤–µ—Ä–Ω—É–≤—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())
        return TYPE
    result = get_stats(period, update.effective_user.id)
    await update.message.reply_text(result, reply_markup=stats_kb())
    return STATS

async def pick_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    t = context.user_data.get("type")
    if text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        await update.message.reply_text("–ü–æ–≤–µ—Ä–Ω—É–≤—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())
        return TYPE
    if text not in CATEGORIES[t]:
        await update.message.reply_text("–û–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=categories_kb(t))
        return CATEGORY
    context.user_data["category"] = text
    subs = CATEGORIES[t][text]
    if subs:
        await update.message.reply_text("–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è:", reply_markup=subcategories_kb(t, text))
        return SUBCATEGORY
    context.user_data["subcategory"] = None
    await update.message.reply_text("–í–≤–µ–¥–∏ —Å—É–º—É:")
    return AMOUNT

async def pick_subcategory(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    t = context.user_data.get("type")
    c = context.user_data.get("category")
    if text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        await update.message.reply_text("–í–∏–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=categories_kb(t))
        return CATEGORY
    if text == "(–±–µ–∑ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó)":
        context.user_data["subcategory"] = None
    else:
        subs = CATEGORIES[t][c] or []
        if text not in subs:
            await update.message.reply_text("–û–±–µ—Ä–∏ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=subcategories_kb(t, c))
            return SUBCATEGORY
        context.user_data["subcategory"] = text
    await update.message.reply_text("–í–≤–µ–¥–∏ —Å—É–º—É:")
    return AMOUNT

async def pick_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.replace(",", ".").strip()
    try:
        amount = float(text)
    except ValueError:
        await update.message.reply_text("–°—É–º–∞ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º:")
        return AMOUNT
    context.user_data["amount"] = amount
    await update.message.reply_text("–í–∞–ª—é—Ç–∞?", reply_markup=currencies_kb())
    return CURRENCY

async def pick_currency(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        await update.message.reply_text("–í–≤–µ–¥–∏ —Å—É–º—É —â–µ —Ä–∞–∑:")
        return AMOUNT
    if text not in CURRENCIES:
        await update.message.reply_text("–û–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É:", reply_markup=currencies_kb())
        return CURRENCY
    context.user_data["currency"] = text
    await update.message.reply_text("–î–æ–¥–∞–π –∫–æ–º–µ–Ω—Ç–∞—Ä –∞–±–æ –Ω–∞–ø–∏—à–∏ '-' —è–∫—â–æ –±–µ–∑:", reply_markup=kb([["-"]]))
    return COMMENT

async def pick_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    comment = update.message.text
    if comment == "-":
        comment = None
    ud = context.user_data
    date_str = datetime.now().strftime("%Y-%m-%d")
    save_tx(
        update.effective_user.id,
        ud["type"],
        ud["category"],
        ud.get("subcategory"),
        ud["amount"],
        ud["currency"],
        comment,
        date_str
    )
    await update.message.reply_text(
        f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {ud['type']} ‚Üí {ud['category']} ‚Üí {ud.get('subcategory', '')}\n"
        f"–°—É–º–∞: {ud['amount']} {ud['currency']}\n–î–∞—Ç–∞: {date_str}"
    )
    ud.clear()
    await update.message.reply_text("–©–æ –¥–∞–ª—ñ?", reply_markup=main_menu_kb())
    return TYPE

# ====== APP START ======
def build_app():
    app = Application.builder().token(BOT_TOKEN).build()
    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, pick_type)],
            CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, pick_category)],
            SUBCATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, pick_subcategory)],
            AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, pick_amount)],
            CURRENCY: [MessageHandler(filters.TEXT & ~filters.COMMAND, pick_currency)],
            COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, pick_comment)],
            STATS: [MessageHandler(filters.TEXT & ~filters.COMMAND, show_stats)],
        },
        fallbacks=[],
        allow_reentry=True,
    )
    app.add_handler(conv)
    return app

def main():
    app = build_app()
    app.run_polling()

if __name__ == "__main__":
    main()
