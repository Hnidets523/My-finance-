import os
import sqlite3
from datetime import datetime
from telegram import (
    Update, ReplyKeyboardMarkup, KeyboardButton, InputFile
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    ConversationHandler, ContextTypes, filters
)
from reportlab.lib.pagesizes import A4
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.lib import colors
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —à—Ä–∏—Ñ—Ç—É
pdfmetrics.registerFont(TTFont('DejaVu', 'DejaVuSans.ttf'))

BOT_TOKEN = os.getenv("BOT_TOKEN")
DB_PATH = "finance.db"

# –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö
conn = sqlite3.connect(DB_PATH, check_same_thread=False)
cur = conn.cursor()

cur.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    name TEXT,
    currency TEXT DEFAULT '–≥—Ä–Ω'
)
""")
cur.execute("""
CREATE TABLE IF NOT EXISTS transactions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    type TEXT,
    category TEXT,
    subcategory TEXT,
    amount REAL,
    currency TEXT,
    comment TEXT,
    date TEXT,
    created_at TEXT
)
""")
conn.commit()

TYPES = ["üí∏ –í–∏—Ç—Ä–∞—Ç–∏", "üí∞ –ù–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è", "üìà –Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å"]
CATEGORIES = {
    "üí∏ –í–∏—Ç—Ä–∞—Ç–∏": {
        "–•–∞—Ä—á—É–≤–∞–Ω–Ω—è": ["–ö–∞—Ñ–µ", "–°—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç/—Ä–∏–Ω–æ–∫", "–ì—É–ª—å–∫–∏", "–¢—Ä–∞—Ç–∏ –Ω–∞ —Ä–æ–±–æ—Ç—ñ"],
        "–û–¥—è–≥ —Ç–∞ –≤–∑—É—Ç—Ç—è": ["–°–µ–∫–æ–Ω–¥", "–§—ñ–∑–∏—á–Ω–∏–π –º–∞–≥–∞–∑–∏–Ω", "–û–Ω–ª–∞–π–Ω"],
        "–û—Ä–µ–Ω–¥–∞/–∂–∏—Ç–ª–æ": None,
        "–ì–æ—Å–ø–æ–¥–∞—Ä—á—ñ —Ç–æ–≤–∞—Ä–∏": None,
        "–î–æ—Ä–æ–≥–∞/–ø–æ–¥–æ—Ä–æ–∂—ñ": ["–ú–∞—Ä—à—Ä—É—Ç–∫–∏", "–ê–≤—Ç–æ–±—É—Å–∏/–¥–∞–ª—å–Ω—ñ—Å—Ç—å"],
        "–û–Ω–ª–∞–π–Ω –ø—ñ–¥–ø–∏—Å–∫–∏": ["iCloud", "YouTube", "Prom"],
        "–ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –º–æ–±—ñ–ª—å–Ω–æ–≥–æ": None,
        "–†–æ–∑–≤–∞–≥–∏": None,
        "Vodafone": ["–ß–∞–π/–ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è", "–°—ñ–º-–∫–∞—Ä—Ç–∏"],
    },
    "üìà –Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó": {
        "–ö—Ä–∏–ø—Ç–∞": None,
        "–ó–∞—Ä—è–¥–Ω—ñ –ø—Ä–∏—Å—Ç—Ä–æ—ó": None,
        "Hub station": None,
        "–ê–∫–∞—É–Ω—Ç–∏": None,
        "–ö—É–ø—ñ–≤–ª—è $": None,
    },
    "üí∞ –ù–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è": {
        "–ó–∞—Ä–ø–ª–∞—Ç–∞": None,
        "–ü–µ—Ä–µ–∫–∞–∑": None,
        "–Ü–Ω—à–µ": None,
    },
}

CURRENCIES = ["–≥—Ä–Ω", "$"]
MONTHS = {
    1: "–°—ñ—á–µ–Ω—å", 2: "–õ—é—Ç–∏–π", 3: "–ë–µ—Ä–µ–∑–µ–Ω—å", 4: "–ö–≤—ñ—Ç–µ–Ω—å",
    5: "–¢—Ä–∞–≤–µ–Ω—å", 6: "–ß–µ—Ä–≤–µ–Ω—å", 7: "–õ–∏–ø–µ–Ω—å", 8: "–°–µ—Ä–ø–µ–Ω—å",
    9: "–í–µ—Ä–µ—Å–µ–Ω—å", 10: "–ñ–æ–≤—Ç–µ–Ω—å", 11: "–õ–∏—Å—Ç–æ–ø–∞–¥", 12: "–ì—Ä—É–¥–µ–Ω—å"
}

NAME, TYPE, CATEGORY, SUBCATEGORY, AMOUNT, CURRENCY, COMMENT, STAT_MODE, STAT_YEAR, STAT_MONTH, STAT_DAY = range(11)

def kb(rows):
    return ReplyKeyboardMarkup([[KeyboardButton(x) for x in row] for row in rows], resize_keyboard=True)

def main_menu_kb():
    return kb([["üí∏ –í–∏—Ç—Ä–∞—Ç–∏", "üí∞ –ù–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è"], ["üìà –Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"], ["üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å"]])

def categories_kb(for_type):
    cats = list(CATEGORIES[for_type].keys())
    rows, row = [], []
    for c in cats:
        row.append(c)
        if len(row) == 2:
            rows.append(row)
            row = []
    if row: rows.append(row)
    rows.append(["‚Ü©Ô∏è –ù–∞–∑–∞–¥"])
    return kb(rows)

def subcategories_kb(for_type, category):
    subs = CATEGORIES[for_type][category]
    rows = []
    if subs:
        row = []
        for s in subs:
            row.append(s)
            if len(row) == 2:
                rows.append(row)
                row = []
        if row: rows.append(row)
    rows.append(["(–±–µ–∑ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó)", "‚Ü©Ô∏è –ù–∞–∑–∞–¥"])
    return kb(rows)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    cur.execute("SELECT name FROM users WHERE user_id=?", (user_id,))
    user = cur.fetchone()
    if not user:
        await update.message.reply_text("üëã –ü—Ä–∏–≤—ñ—Ç! –Ø ‚Äî —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –±–æ—Ç. –î–∞–≤–∞–π –ø–æ–∑–Ω–∞–π–æ–º–∏–º–æ—Å—å.\n–Ø–∫ –¥–æ —Ç–µ–±–µ –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—å?")
        return NAME
    await update.message.reply_text("üëã –†–∞–¥–∏–π —Ç–µ–±–µ –∑–Ω–æ–≤—É –±–∞—á–∏—Ç–∏! –û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=main_menu_kb())
    return TYPE

async def save_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text.strip()
    user_id = update.effective_user.id
    cur.execute("INSERT OR REPLACE INTO users (user_id, name) VALUES (?, ?)", (user_id, name))
    conn.commit()
    await update.message.reply_text(
        f"‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å —Å—Ç–≤–æ—Ä–µ–Ω–æ!\n–Ü–º'—è: {name}\n–í–∞–ª—é—Ç–∞: –≥—Ä–Ω\n\n"
        "–¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ —Ç–æ–±—ñ:\n"
        "‚Ä¢ –ó–∞–ø–∏—Å—É–≤–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏ —Ç–∞ –¥–æ—Ö–æ–¥–∏\n"
        "‚Ä¢ –í–µ—Å—Ç–∏ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó\n"
        "‚Ä¢ –û—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑ PDF-–∑–≤—ñ—Ç–æ–º\n"
        "‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å\n\n"
        "–û–±–µ—Ä–∏ –¥—ñ—é –Ω–∏–∂—á–µ:",
        reply_markup=main_menu_kb()
    )
    return TYPE

async def pick_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    t = update.message.text
    if t not in TYPES:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ:", reply_markup=main_menu_kb())
        return TYPE
    if t == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º:", reply_markup=kb([["üìÖ –ó–∞ –¥–µ–Ω—å", "üìÖ –ó–∞ –º—ñ—Å—è—Ü—å"], ["‚Ü©Ô∏è –ù–∞–∑–∞–¥"]]))
        return STAT_MODE
    if t == "üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å":
        user_id = update.effective_user.id
        cur.execute("SELECT name, currency FROM users WHERE user_id=?", (user_id,))
        u = cur.fetchone()
        await update.message.reply_text(f"üë§ –ü—Ä–æ—Ñ—ñ–ª—å:\n–Ü–º'—è: {u[0]}\n–í–∞–ª—é—Ç–∞: {u[1]}", reply_markup=main_menu_kb())
        return TYPE
    context.user_data["type"] = t
    await update.message.reply_text("–í–∏–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=categories_kb(t))
    return CATEGORY

async def pick_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    t = context.user_data.get("type")
    if text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        await update.message.reply_text("–ü–æ–≤–µ—Ä–Ω—É–≤—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())
        return TYPE
    if text not in CATEGORIES[t]:
        await update.message.reply_text("–û–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=categories_kb(t))
        return CATEGORY
    context.user_data["category"] = text
    subs = CATEGORIES[t][text]
    if subs:
        await update.message.reply_text("–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è:", reply_markup=subcategories_kb(t, text))
        return SUBCATEGORY
    context.user_data["subcategory"] = None
    await update.message.reply_text("–í–≤–µ–¥–∏ —Å—É–º—É:")
    return AMOUNT

async def pick_subcategory(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    t = context.user_data.get("type")
    c = context.user_data.get("category")
    if text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        await update.message.reply_text("–í–∏–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=categories_kb(t))
        return CATEGORY
    if text == "(–±–µ–∑ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó)":
        context.user_data["subcategory"] = None
    else:
        subs = CATEGORIES[t][c] or []
        if text not in subs:
            await update.message.reply_text("–û–±–µ—Ä–∏ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=subcategories_kb(t, c))
            return SUBCATEGORY
        context.user_data["subcategory"] = text
    await update.message.reply_text("–í–≤–µ–¥–∏ —Å—É–º—É:")
    return AMOUNT

async def pick_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.replace(",", ".").strip()
    try:
        amount = float(text)
    except ValueError:
        await update.message.reply_text("–°—É–º–∞ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º:")
        return AMOUNT
    context.user_data["amount"] = amount
    await update.message.reply_text("–í–∞–ª—é—Ç–∞?", reply_markup=kb([CURRENCIES, ["‚Ü©Ô∏è –ù–∞–∑–∞–¥"]]))
    return CURRENCY

async def pick_currency(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        await update.message.reply_text("–í–≤–µ–¥–∏ —Å—É–º—É —â–µ —Ä–∞–∑:")
        return AMOUNT
    if text not in CURRENCIES:
        await update.message.reply_text("–û–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É:", reply_markup=kb([CURRENCIES, ["‚Ü©Ô∏è –ù–∞–∑–∞–¥"]]))
        return CURRENCY
    context.user_data["currency"] = text
    await update.message.reply_text("–î–æ–¥–∞–π –∫–æ–º–µ–Ω—Ç–∞—Ä –∞–±–æ –Ω–∞–ø–∏—à–∏ '-' —è–∫—â–æ –±–µ–∑:", reply_markup=kb([["-"]]))
    return COMMENT

async def pick_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    comment = update.message.text
    if comment == "-":
        comment = None
    ud = context.user_data
    date_str = datetime.now().strftime("%Y-%m-%d")
    cur.execute("""
        INSERT INTO transactions (user_id, type, category, subcategory, amount, currency, comment, date, created_at)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
    """, (
        update.effective_user.id,
        ud["type"], ud["category"], ud.get("subcategory"),
        ud["amount"], ud["currency"], comment, date_str, datetime.utcnow().isoformat()
    ))
    conn.commit()
    await update.message.reply_text(
        f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {ud['type']} ‚Üí {ud['category']} ‚Üí {ud.get('subcategory', '')}\n"
        f"–°—É–º–∞: {ud['amount']} {ud['currency']}\n–î–∞—Ç–∞: {date_str}",
        reply_markup=main_menu_kb()
    )
    ud.clear()
    return TYPE

def build_app():
    app = Application.builder().token(BOT_TOKEN).build()
    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_name)],
            TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, pick_type)],
            CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, pick_category)],
            SUBCATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, pick_subcategory)],
            AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, pick_amount)],
            CURRENCY: [MessageHandler(filters.TEXT & ~filters.COMMAND, pick_currency)],
            COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, pick_comment)],
        },
        fallbacks=[],
        allow_reentry=True
    )
    app.add_handler(conv)
    return app

def main():
    app = build_app()
    app.run_polling()

if __name__ == "__main__":
    main()
