import os
import sqlite3
import calendar
import logging
from enum import Enum, auto
from datetime import datetime

from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton, InputFile
)
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, ConversationHandler, filters
)

# ---- PDF ----
from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont

# ========= CONFIG =========
BOT_TOKEN = os.getenv("BOT_TOKEN")  # –∑ Railway ‚Üí Variables
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –î–æ–¥–∞–π —É Railway ‚Üí Variables.")

# –ó–∞—Ä–µ—î—Å—Ç—Ä—É—î–º–æ –∫–∏—Ä–∏–ª–∏—á–Ω–∏–π —à—Ä–∏—Ñ—Ç (—Ñ–∞–π–ª DejaVuSans.ttf –º–∞—î –ª–µ–∂–∞—Ç–∏ –ø–æ—Ä—è–¥ —ñ–∑ main.py)
pdfmetrics.registerFont(TTFont('DejaVu', 'DejaVuSans.ttf'))

TYPE_CODES = {"exp": "üí∏ –í–∏—Ç—Ä–∞—Ç–∏", "inc": "üí∞ –ù–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è", "inv": "üìà –Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó"}
CURRENCIES = {"UAH": "–≥—Ä–Ω", "USD": "$"}
CURRENCY_LIST = [("–≥—Ä–Ω", "UAH"), ("$", "USD")]  # (label, code)

MONTH_NAMES = {
    "01": "–°—ñ—á–µ–Ω—å", "02": "–õ—é—Ç–∏–π", "03": "–ë–µ—Ä–µ–∑–µ–Ω—å", "04": "–ö–≤—ñ—Ç–µ–Ω—å",
    "05": "–¢—Ä–∞–≤–µ–Ω—å", "06": "–ß–µ—Ä–≤–µ–Ω—å", "07": "–õ–∏–ø–µ–Ω—å", "08": "–°–µ—Ä–ø–µ–Ω—å",
    "09": "–í–µ—Ä–µ—Å–µ–Ω—å", "10": "–ñ–æ–≤—Ç–µ–Ω—å", "11": "–õ–∏—Å—Ç–æ–ø–∞–¥", "12": "–ì—Ä—É–¥–µ–Ω—å"
}

CATEGORIES = {
    "üí∏ –í–∏—Ç—Ä–∞—Ç–∏": {
        "–•–∞—Ä—á—É–≤–∞–Ω–Ω—è": ["–ö–∞—Ñ–µ", "–°—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç/—Ä–∏–Ω–æ–∫", "–ì—É–ª—å–∫–∏", "–¢—Ä–∞—Ç–∏ –Ω–∞ —Ä–æ–±–æ—Ç—ñ"],
        "–û–¥—è–≥ —Ç–∞ –≤–∑—É—Ç—Ç—è": ["–°–µ–∫–æ–Ω–¥", "–§—ñ–∑–∏—á–Ω–∏–π –º–∞–≥–∞–∑–∏–Ω", "–û–Ω–ª–∞–π–Ω"],
        "–û—Ä–µ–Ω–¥–∞/–∂–∏—Ç–ª–æ": None,
        "–ì–æ—Å–ø–æ–¥–∞—Ä—á—ñ —Ç–æ–≤–∞—Ä–∏": None,
        "–î–æ—Ä–æ–≥–∞/–ø–æ–¥–æ—Ä–æ–∂—ñ": ["–ú–∞—Ä—à—Ä—É—Ç–∫–∏", "–ê–≤—Ç–æ–±—É—Å–∏/–¥–∞–ª—å–Ω—ñ—Å—Ç—å"],
        "–û–Ω–ª–∞–π–Ω –ø—ñ–¥–ø–∏—Å–∫–∏": ["iCloud", "YouTube", "Prom"],
        "–ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –º–æ–±—ñ–ª—å–Ω–æ–≥–æ": None,
        "–†–æ–∑–≤–∞–≥–∏": None,
        "Vodafone": ["–ß–∞–π/–ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è", "–°—ñ–º-–∫–∞—Ä—Ç–∏"],
    },
    "üìà –Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó": {
        "–ö—Ä–∏–ø—Ç–∞": None,
        "–ó–∞—Ä—è–¥–Ω—ñ –ø—Ä–∏—Å—Ç—Ä–æ—ó": None,
        "Hub station": None,
        "–ê–∫–∞—É–Ω—Ç–∏": None,
        "–ö—É–ø—ñ–≤–ª—è $": None,
    },
    "üí∞ –ù–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è": {
        "–ó–∞—Ä–ø–ª–∞—Ç–∞": None,
        "–ü–µ—Ä–µ–∫–∞–∑": None,
        "–Ü–Ω—à–µ": None,
    },
}

# ========= DB =========
DB_PATH = "finance.db"
conn = sqlite3.connect(DB_PATH, check_same_thread=False)
cur = conn.cursor()

# –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ (–æ—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç)
cur.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    name TEXT,
    currency TEXT DEFAULT '–≥—Ä–Ω',
    monthly_budget REAL,
    created_at TEXT
)
""")

# –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
cur.execute("""
CREATE TABLE IF NOT EXISTS transactions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    type TEXT,
    category TEXT,
    subcategory TEXT,
    amount REAL,
    currency TEXT,
    comment TEXT,
    date TEXT,
    created_at TEXT
)
""")
conn.commit()

# ========= STATES =========
class S(Enum):
    TYPE = auto()
    CATEGORY = auto()
    SUBCATEGORY = auto()
    AMOUNT = auto()
    CURRENCY = auto()
    COMMENT = auto()
    STATS_MODE = auto()
    YEAR = auto()
    MONTH = auto()
    DAY = auto()
    PDF = auto()
    # –ü—Ä–æ—Ñ—ñ–ª—å / –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
    ASK_NAME = auto()
    ASK_CURRENCY = auto()
    PROFILE = auto()
    PROFILE_EDIT_NAME = auto()

# ========= LOGGING =========
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("finance-bot")

# ========= HELPERS (DB) =========
def get_user(user_id: int):
    cur.execute("SELECT user_id, name, currency, monthly_budget, created_at FROM users WHERE user_id=?", (user_id,))
    return cur.fetchone()

def create_or_update_user(user_id: int, name: str, currency: str):
    cur.execute("""
        INSERT INTO users (user_id, name, currency, created_at)
        VALUES (?, ?, ?, ?)
        ON CONFLICT(user_id) DO UPDATE SET name=excluded.name, currency=excluded.currency
    """, (user_id, name, currency, datetime.utcnow().isoformat()))
    conn.commit()

def update_user_name(user_id: int, name: str):
    cur.execute("UPDATE users SET name=? WHERE user_id=?", (name, user_id))
    conn.commit()

def update_user_currency(user_id: int, currency: str):
    cur.execute("UPDATE users SET currency=? WHERE user_id=?", (currency, user_id))
    conn.commit()

def user_currency(user_id: int) -> str:
    u = get_user(user_id)
    return u[2] if u and u[2] else "–≥—Ä–Ω"

def save_tx(user_id, ttype, cat, sub, amount, currency, comment, date_str):
    cur.execute("""
        INSERT INTO transactions (user_id, type, category, subcategory, amount, currency, comment, date, created_at)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
    """, (user_id, ttype, cat, sub, amount, currency, comment, date_str, datetime.utcnow().isoformat()))
    conn.commit()

def fetch_transactions(user_id, year, month=None, day=None):
    if day:
        date_str = f"{year}-{month}-{day}"
        q = """SELECT type, category, subcategory, amount, currency, comment
               FROM transactions WHERE user_id=? AND date=?"""
        cur.execute(q, (user_id, date_str))
    else:
        q = """SELECT type, category, subcategory, amount, currency, comment
               FROM transactions
               WHERE user_id=? AND strftime('%Y', date)=? AND strftime('%m', date)=?"""
        cur.execute(q, (user_id, str(year), str(month)))
    return cur.fetchall()

# ========= KEYBOARDS =========
def ikb(rows):
    return InlineKeyboardMarkup(
        [[InlineKeyboardButton(t, callback_data=d) for (t, d) in row] for row in rows]
    )

def main_menu_kb():
    return ikb([
        [("üí∏ –í–∏—Ç—Ä–∞—Ç–∏", "type:exp"), ("üí∞ –ù–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è", "type:inc")],
        [("üìà –Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó", "type:inv")],
        [("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "stats:open"), ("üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å", "profile:open")]
    ])

def categories_kb(tname):
    cats = list(CATEGORIES[tname].keys())
    rows, row = [], []
    for i, c in enumerate(cats):
        row.append((c, f"cat:{i}"))
        if len(row) == 2:
            rows.append(row); row = []
    if row: rows.append(row)
    rows.append([("‚¨Ö –ù–∞–∑–∞–¥", "back:main")])
    return ikb(rows)

def subcategories_kb(tname, cat_name):
    subs = CATEGORIES[tname][cat_name]
    rows = []
    if subs:
        row = []
        for i, s in enumerate(subs):
            row.append((s, f"sub:{i}"))
            if len(row) == 2:
                rows.append(row); row = []
        if row: rows.append(row)
    rows.append([("(–±–µ–∑ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó)", "sub:none")])
    rows.append([("‚¨Ö –ù–∞–∑–∞–¥", "back:cats")])
    return ikb(rows)

def currencies_kb_inline():
    rows = [[(label, f"cur:{code}") for (label, code) in CURRENCY_LIST]]
    return ikb(rows)

def stats_mode_kb():
    return ikb([
        [("üìÜ –ó–∞ –º—ñ—Å—è—Ü—å", "stats:mode:month"), ("üìÖ –ó–∞ –¥–µ–Ω—å", "stats:mode:day")],
        [("‚¨Ö –ù–∞–∑–∞–¥", "back:main")]
    ])

def years_kb():
    now = datetime.now().year
    years = [str(y) for y in range(now - 2, now + 1)]
    row = [(y, f"stats:year:{y}") for y in years]
    return ikb([row, [("‚¨Ö –ù–∞–∑–∞–¥", "back:stats")]])

def months_kb():
    months = [
        ("–°—ñ—á–µ–Ω—å", "01"), ("–õ—é—Ç–∏–π", "02"), ("–ë–µ—Ä–µ–∑–µ–Ω—å", "03"),
        ("–ö–≤—ñ—Ç–µ–Ω—å", "04"), ("–¢—Ä–∞–≤–µ–Ω—å", "05"), ("–ß–µ—Ä–≤–µ–Ω—å", "06"),
        ("–õ–∏–ø–µ–Ω—å", "07"), ("–°–µ—Ä–ø–µ–Ω—å", "08"), ("–í–µ—Ä–µ—Å–µ–Ω—å", "09"),
        ("–ñ–æ–≤—Ç–µ–Ω—å", "10"), ("–õ–∏—Å—Ç–æ–ø–∞–¥", "11"), ("–ì—Ä—É–¥–µ–Ω—å", "12")
    ]
    rows, row = [], []
    for title, num in months:
        row.append((title, f"stats:month:{num}"))
        if len(row) == 3:
            rows.append(row); row = []
    if row: rows.append(row)
    rows.append([("‚¨Ö –ù–∞–∑–∞–¥", "back:year")])
    return ikb(rows)

def days_kb(year, month):
    last = calendar.monthrange(int(year), int(month))[1]
    rows, row = [], []
    for d in range(1, last + 1):
        row.append((str(d), f"stats:day:{d:02d}"))
        if len(row) == 7:
            rows.append(row); row = []
    if row: rows.append(row)
    rows.append([("‚¨Ö –ù–∞–∑–∞–¥", "back:month")])
    return ikb(rows)

# ========= TEXT/REPORT =========
def stats_text(user_id, year, month=None, day=None):
    tx = fetch_transactions(user_id, year, month, day)
    title = f"üìÖ {day} {MONTH_NAMES[month]} {year}" if day else f"üìÜ {MONTH_NAMES[month]} {year}"
    if not tx:
        return f"{title}\nüì≠ –ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤.", tx

    sums = {"üí∏ –í–∏—Ç—Ä–∞—Ç–∏": 0, "üí∞ –ù–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è": 0, "üìà –Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó": 0}
    lines = []
    for t, cat, sub, amt, curr, com in tx:
        sums[t] += float(amt or 0)
        lines.append(f"- {t} | {cat}/{sub or '-'}: {amt:.2f} {curr} ({com or '-'})")
    totals = "\n".join([f"{t}: {sums[t]:.2f}" for t in sums])
    return f"{title}\n\n" + "\n".join(lines) + f"\n\n–ü—ñ–¥—Å—É–º–æ–∫:\n{totals}", tx

def generate_pdf(transactions, filename, title):
    doc = SimpleDocTemplate(filename, pagesize=A4)
    styles = getSampleStyleSheet()
    styles.add(ParagraphStyle(name='NormalUkr', fontName='DejaVu', fontSize=11, leading=14))
    elements = [Paragraph(title, styles["NormalUkr"])]

    data = [["–¢–∏–ø", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è", "–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è", "–°—É–º–∞", "–í–∞–ª—é—Ç–∞", "–ö–æ–º–µ–Ω—Ç–∞—Ä"]]
    totals = {"üí∏ –í–∏—Ç—Ä–∞—Ç–∏": 0, "üí∞ –ù–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è": 0, "üìà –Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó": 0}

    for t, cat, sub, amt, curr, com in transactions:
        a = float(amt or 0)
        totals[t] += a
        data.append([t, cat, sub or "-", f"{a:.2f}", curr, com or "-"])

    data.append(["", "", "", "", "", ""])
    for t in totals:
        data.append([t, "", "", f"{totals[t]:.2f}", "", ""])

    table = Table(data, repeatRows=1, hAlign='LEFT')
    table.setStyle(TableStyle([
        ('FONTNAME', (0, 0), (-1, -1), 'DejaVu'),
        ('FONTSIZE', (0, 0), (-1, -1), 9),
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('GRID', (0, 0), (-1, -1), 0.5, colors.black),
        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
    ]))
    elements.append(table)
    doc.build(elements)

# ========= UTIL =========
async def edit_or_send(q, text, kb=None):
    try:
        await q.message.edit_text(text, reply_markup=kb)
    except:
        await q.message.reply_text(text, reply_markup=kb)

# ========= START / ONBOARDING =========
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    u = get_user(update.effective_user.id)
    if not u:
        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø ‚Äî —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –±–æ—Ç. –î–∞–≤–∞–π –ø–æ–∑–Ω–∞–π–æ–º–∏–º–æ—Å—å.\n–Ø–∫ –¥–æ —Ç–µ–±–µ –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—å?"
        )
        return S.ASK_NAME
    await update.message.reply_text(f"üëã –ü—Ä–∏–≤—ñ—Ç, {u[1]}!", reply_markup=main_menu_kb())
    return S.TYPE

async def ask_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = (update.message.text or "").strip()
    if not name:
        await update.message.reply_text("–í–≤–µ–¥–∏ —ñ–º'—è, –±—É–¥—å –ª–∞—Å–∫–∞ üôÇ")
        return S.ASK_NAME
    context.user_data["new_name"] = name
    await update.message.reply_text("üí± –û–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º:", reply_markup=currencies_kb_inline())
    return S.ASK_CURRENCY

async def ask_currency_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    data = q.data  # cur:UAH / cur:USD
    code = data.split(":")[1]
    label = CURRENCIES[code]
    name = context.user_data.get("new_name", update.effective_user.first_name or "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á")

    create_or_update_user(update.effective_user.id, name, label)
    await edit_or_send(q, f"‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å —Å—Ç–≤–æ—Ä–µ–Ω–æ!\n–Ü–º'—è: {name}\n–í–∞–ª—é—Ç–∞: {label}", main_menu_kb())
    context.user_data.pop("new_name", None)
    return S.TYPE

# ========= PROFILE =========
async def profile_open(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    u = get_user(update.effective_user.id)
    if not u:
        await edit_or_send(q, "–°–ø–µ—Ä—à—É –∑–∞–ø—É—Å—Ç–∏ /start –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é.")
        return S.TYPE
    text = (f"üë§ –ü—Ä–æ—Ñ—ñ–ª—å\n\n"
            f"–Ü–º'—è: {u[1]}\n"
            f"–í–∞–ª—é—Ç–∞: {u[2]}\n"
            f"–ú—ñ—Å—è—á–Ω–∏–π –±—é–¥–∂–µ—Ç: {u[3] or '–ù–µ –∑–∞–¥–∞–Ω–æ'}\n"
            f"–ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π: {u[4][:10] if u[4] else '-'}")
    kb = ikb([
        [("‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ —ñ–º'—è", "profile:edit_name"), ("üí± –ó–º—ñ–Ω–∏—Ç–∏ –≤–∞–ª—é—Ç—É", "profile:edit_currency")],
        [("‚¨Ö –ù–∞–∑–∞–¥", "back:main")]
    ])
    await edit_or_send(q, text, kb)
    return S.PROFILE

async def profile_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    data = q.data
    if data == "profile:edit_name":
        await edit_or_send(q, "–í–≤–µ–¥–∏ –Ω–æ–≤–µ —ñ–º'—è:")
        return S.PROFILE_EDIT_NAME
    if data == "profile:edit_currency":
        await edit_or_send(q, "–û–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É:", currencies_kb_inline())
        return S.ASK_CURRENCY
    if data == "back:main":
        await edit_or_send(q, "–ú–µ–Ω—é:", main_menu_kb())
        return S.TYPE
    return S.PROFILE

async def profile_set_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = (update.message.text or "").strip()
    if not name:
        await update.message.reply_text("–í–≤–µ–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω–µ —ñ–º'—è üôÇ")
        return S.PROFILE_EDIT_NAME
    update_user_name(update.effective_user.id, name)
    await update.message.reply_text("‚úÖ –Ü–º'—è –∑–º—ñ–Ω–µ–Ω–æ.", reply_markup=main_menu_kb())
    return S.TYPE

# ========= CORE FLOW (—Ç–∏–ø ‚Üí –∫–∞—Ç–µ–≥–æ—Ä—ñ—è ‚Üí –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è ‚Üí —Å—É–º–∞ ‚Üí –≤–∞–ª—é—Ç–∞ ‚Üí –∫–æ–º–µ–Ω—Ç–∞—Ä) =========
async def on_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    data = q.data

    # –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é: —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü—ñ—ó
    if data.startswith("type:"):
        code = data.split(":")[1]
        tname = TYPE_CODES[code]
        context.user_data.clear()
        context.user_data["type"] = tname
        context.user_data["cat_list"] = list(CATEGORIES[tname].keys())
        await edit_or_send(q, "–í–∏–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", categories_kb(tname))
        return S.CATEGORY

    if data == "back:main":
        await edit_or_send(q, "–ú–µ–Ω—é:", main_menu_kb())
        return S.TYPE

    # –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó
    if data.startswith("cat:"):
        idx = int(data.split(":")[1])
        tname = context.user_data["type"]
        cats = context.user_data["cat_list"]
        if idx < 0 or idx >= len(cats):
            await edit_or_send(q, "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è. –û–±–µ—Ä–∏ —â–µ —Ä–∞–∑:", categories_kb(tname))
            return S.CATEGORY
        cat = cats[idx]
        context.user_data["category"] = cat
        subs = CATEGORIES[tname][cat]
        if subs:
            context.user_data["sub_list"] = subs
            await edit_or_send(q, "–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è:", subcategories_kb(tname, cat))
            return S.SUBCATEGORY
        else:
            context.user_data["subcategory"] = None
            await edit_or_send(q, "–í–≤–µ–¥–∏ —Å—É–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 123.45):")
            return S.AMOUNT

    if data == "back:cats":
        tname = context.user_data.get("type")
        await edit_or_send(q, "–í–∏–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", categories_kb(tname))
        return S.CATEGORY

    # –ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    if data.startswith("sub:"):
        if data == "sub:none":
            context.user_data["subcategory"] = None
        else:
            idx = int(data.split(":")[1])
            subs = context.user_data.get("sub_list", [])
            if idx < 0 or idx >= len(subs):
                await edit_or_send(q, "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è. –û–±–µ—Ä–∏ —â–µ —Ä–∞–∑:",
                                   subcategories_kb(context.user_data["type"], context.user_data["category"]))
                return S.SUBCATEGORY
            context.user_data["subcategory"] = subs[idx]
        await edit_or_send(q, "–í–≤–µ–¥–∏ —Å—É–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 123.45):")
        return S.AMOUNT

    # –í–∞–ª—é—Ç–∞ (–∑ –∫–Ω–æ–ø–∫–∏)
    if data.startswith("cur:"):
        code = data.split(":")[1]  # UAH / USD
        label = CURRENCIES[code]
        context.user_data["currency"] = label
        await edit_or_send(q, "üìù –î–æ–¥–∞–π –∫–æ–º–µ–Ω—Ç–∞—Ä –∞–±–æ '-' —è–∫—â–æ –±–µ–∑:")
        return S.COMMENT

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if data == "stats:open" or data == "back:stats":
        await edit_or_send(q, "–û–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º:", stats_mode_kb())
        return S.STATS_MODE

    if data.startswith("stats:mode:"):
        mode = data.split(":")[2]  # month/day
        context.user_data["stats_mode"] = mode
        await edit_or_send(q, "–û–±–µ—Ä—ñ—Ç—å —Ä—ñ–∫:", years_kb())
        return S.YEAR

    if data == "back:year":
        await edit_or_send(q, "–û–±–µ—Ä—ñ—Ç—å —Ä—ñ–∫:", years_kb())
        return S.YEAR

    if data.startswith("stats:year:"):
        year = data.split(":")[2]
        context.user_data["year"] = year
        await edit_or_send(q, "–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—è—Ü—å:", months_kb())
        return S.MONTH

    if data == "back:month":
        await edit_or_send(q, "–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—è—Ü—å:", months_kb())
        return S.MONTH

    if data.startswith("stats:month:"):
        month = data.split(":")[2]
        context.user_data["month"] = month
        if context.user_data.get("stats_mode") == "month":
            text, tx = stats_text(update.effective_user.id, context.user_data["year"], month)
            context.user_data["tx"] = tx
            context.user_data["day"] = None
            kb = ikb([[("üìÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ PDF", "stats:pdf")], [("‚¨Ö –ù–∞–∑–∞–¥", "back:stats")]])
            await edit_or_send(q, text, kb)
            return S.PDF
        else:
            await edit_or_send(q, "–û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å:", days_kb(context.user_data["year"], month))
            return S.DAY

    if data.startswith("stats:day:"):
        day = data.split(":")[2]
        context.user_data["day"] = day
        text, tx = stats_text(update.effective_user.id, context.user_data["year"], context.user_data["month"], day)
        context.user_data["tx"] = tx
        kb = ikb([[("üìÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ PDF", "stats:pdf")], [("‚¨Ö –ù–∞–∑–∞–¥", "back:stats")]])
        await edit_or_send(q, text, kb)
        return S.PDF

    if data == "stats:pdf":
        tx = context.user_data.get("tx", [])
        if not tx:
            await edit_or_send(q, "üì≠ –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è PDF.")
            return S.STATS_MODE
        year = context.user_data.get("year")
        month = context.user_data.get("month")
        day = context.user_data.get("day")
        title = f"–ó–≤—ñ—Ç –∑–∞ {day} {MONTH_NAMES[month]} {year}" if day else f"–ó–≤—ñ—Ç –∑–∞ {MONTH_NAMES[month]} {year}"
        filename = "report.pdf"
        generate_pdf(tx, filename, title)
        with open(filename, "rb") as f:
            await q.message.reply_document(InputFile(f, filename))
        await q.message.reply_text("‚úÖ –ì–æ—Ç–æ–≤–æ", reply_markup=stats_mode_kb())
        return S.STATS_MODE

    # –ü—Ä–æ—Ñ—ñ–ª—å –≤—ñ–¥–∫—Ä–∏–≤–∞—î—Ç—å—Å—è –æ–∫—Ä–µ–º–∏–º —Ö–µ–Ω–¥–ª–µ—Ä–æ–º (profile:open),
    # –∞ —Ü–µ–π on_cb –æ–±—Ä–æ–±–ª—è—î —Ä–µ—à—Ç—É callback-–∫–Ω–æ–ø–æ–∫.
    return S.TYPE

# ========= TEXT INPUTS =========
async def on_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").replace(",", ".").strip()
    try:
        amount = float(text)
    except Exception:
        await update.message.reply_text("–°—É–º–∞ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º. –ü—Ä–∏–∫–ª–∞–¥: 123.45")
        return S.AMOUNT
    context.user_data["amount"] = amount

    # –ü—Ä–æ–ø–æ–Ω—É—î–º–æ –≤–∏–±—ñ—Ä –≤–∞–ª—é—Ç–∏ –∞–±–æ –±–µ—Ä–µ–º–æ –≤–∞–ª—é—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    u_curr = user_currency(update.effective_user.id)
    kb = ikb([[("–í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –≤–∞–ª—é—Ç—É –ø—Ä–æ—Ñ—ñ–ª—é", f"cur_profile:{u_curr}")],
              [(CURRENCIES["UAH"], "cur:UAH"), (CURRENCIES["USD"], "cur:USD")]])
    await update.message.reply_text(f"–û–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É (–∞–±–æ —Ç–∏—Å–Ω–∏ '–í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –≤–∞–ª—é—Ç—É –ø—Ä–æ—Ñ—ñ–ª—é: {u_curr}'):", reply_markup=kb)
    return S.CURRENCY

async def on_currency_from_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    # cur_profile:–≥—Ä–Ω  ‚Äî –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —è–∫ —î (—Ä—è–¥–æ–∫-–ª–µ–π–±–ª)
    label = q.data.split(":", 1)[1]
    context.user_data["currency"] = label
    await edit_or_send(q, "üìù –î–æ–¥–∞–π –∫–æ–º–µ–Ω—Ç–∞—Ä –∞–±–æ '-' —è–∫—â–æ –±–µ–∑:")
    return S.COMMENT

async def on_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    comment = (update.message.text or "").strip()
    if comment == "-":
        comment = None
    ud = context.user_data
    # –Ø–∫—â–æ –Ω–µ –æ–±—Ä–∞–ª–∏ –≤–∞–ª—é—Ç—É –∫–Ω–æ–ø–∫–æ—é ‚Äî –±–µ—Ä–µ–º–æ –≤–∞–ª—é—Ç—É –ø—Ä–æ—Ñ—ñ–ª—é
    currency = ud.get("currency", user_currency(update.effective_user.id))
    date_str = datetime.now().strftime("%Y-%m-%d")

    save_tx(
        update.effective_user.id,
        ud["type"],
        ud["category"],
        ud.get("subcategory"),
        ud["amount"],
        currency,
        comment,
        date_str
    )
    await update.message.reply_text(
        "‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ:\n"
        f"{ud['type']} ‚Üí {ud['category']} ‚Üí {ud.get('subcategory','-')}\n"
        f"–°—É–º–∞: {ud['amount']} {currency}\n"
        f"–î–∞—Ç–∞: {date_str}\n"
        f"–ö–æ–º–µ–Ω—Ç–∞—Ä: {comment or '-'}",
        reply_markup=main_menu_kb()
    )
    ud.clear()
    return S.TYPE

# ========= APP =========
def build_app():
    app = Application.builder().token(BOT_TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", cmd_start)],
        states={
            # –û–Ω–±–æ—Ä–¥–∏–Ω–≥
            S.ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_name)],
            S.ASK_CURRENCY: [
                CallbackQueryHandler(ask_currency_cb, pattern=r"^cur:(UAH|USD)$")
            ],

            # –ü—Ä–æ—Ñ—ñ–ª—å
            S.PROFILE: [
                CallbackQueryHandler(profile_router, pattern=r"^(profile:edit_name|profile:edit_currency|back:main)$")
            ],
            S.PROFILE_EDIT_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, profile_set_name)
            ],

            # –û—Å–Ω–æ–≤–Ω–∏–π —Ñ–ª–æ—É
            S.TYPE: [
                CallbackQueryHandler(on_cb, pattern=r"^(type:|back:main|stats:open)$"),
                CallbackQueryHandler(profile_open, pattern=r"^profile:open$")
            ],
            S.CATEGORY: [CallbackQueryHandler(on_cb, pattern=r"^(cat:|back:main)$")],
            S.SUBCATEGORY: [CallbackQueryHandler(on_cb, pattern=r"^(sub:|back:cats)$")],
            S.AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, on_amount)],
            S.CURRENCY: [
                CallbackQueryHandler(on_cb, pattern=r"^cur:(UAH|USD)$"),
                CallbackQueryHandler(on_currency_from_profile, pattern=r"^cur_profile:")
            ],
            S.COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, on_comment)],

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ / PDF
            S.STATS_MODE: [CallbackQueryHandler(on_cb, pattern=r"^(stats:mode:|back:main|back:stats)$")],
            S.YEAR: [CallbackQueryHandler(on_cb, pattern=r"^(stats:year:|back:stats)$")],
            S.MONTH: [CallbackQueryHandler(on_cb, pattern=r"^(stats:month:|back:year)$")],
            S.DAY: [CallbackQueryHandler(on_cb, pattern=r"^(stats:day:|back:month)$")],
            S.PDF: [CallbackQueryHandler(on_cb, pattern=r"^(stats:pdf|back:stats)$")],
        },
        fallbacks=[],
        allow_reentry=True,
    )

    app.add_handler(conv)
    # –î–æ–¥–∞—Ç–∫–æ–≤–æ –æ–∫—Ä–µ–º–æ –ª–æ–≤–∏–º–æ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø—Ä–æ—Ñ—ñ–ª—é –∑—ñ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é
    app.add_handler(CallbackQueryHandler(profile_open, pattern=r"^profile:open$"))
    return app

def main():
    app = build_app()
    app.run_polling()

if __name__ == "__main__":
    main()
