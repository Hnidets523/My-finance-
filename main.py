import os
import sqlite3
import calendar
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InputFile
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ConversationHandler,
    ContextTypes, filters
)

# PDF
from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle

# ---------- CONFIG ----------
BOT_TOKEN = os.getenv("BOT_TOKEN")  # –í Railway: Variables ‚Üí BOT_TOKEN
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.")

# –®—Ä–∏—Ñ—Ç (—Ñ–∞–π–ª DejaVuSans.ttf –º–∞—î –±—É—Ç–∏ –≤ –∫–æ—Ä–µ–Ω—ñ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é)
pdfmetrics.registerFont(TTFont('DejaVu', 'DejaVuSans.ttf'))

DB_PATH = "finance.db"

# ---------- DB ----------
conn = sqlite3.connect(DB_PATH, check_same_thread=False)
cur = conn.cursor()
cur.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    name TEXT,
    currency TEXT DEFAULT '–≥—Ä–Ω',
    created_at TEXT
)
""")
cur.execute("""
CREATE TABLE IF NOT EXISTS transactions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    type TEXT,
    category TEXT,
    subcategory TEXT,
    amount REAL,
    currency TEXT,
    comment TEXT,
    date TEXT,
    created_at TEXT
)
""")
conn.commit()

# ---------- DATA ----------
TYPES = ["üí∏ –í–∏—Ç—Ä–∞—Ç–∏", "üí∞ –ù–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è", "üìà –Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å"]
CATEGORIES = {
    "üí∏ –í–∏—Ç—Ä–∞—Ç–∏": {
        "–•–∞—Ä—á—É–≤–∞–Ω–Ω—è": ["–ö–∞—Ñ–µ", "–°—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç/—Ä–∏–Ω–æ–∫", "–ì—É–ª—å–∫–∏", "–¢—Ä–∞—Ç–∏ –Ω–∞ —Ä–æ–±–æ—Ç—ñ"],
        "–û–¥—è–≥ —Ç–∞ –≤–∑—É—Ç—Ç—è": ["–°–µ–∫–æ–Ω–¥", "–§—ñ–∑–∏—á–Ω–∏–π –º–∞–≥–∞–∑–∏–Ω", "–û–Ω–ª–∞–π–Ω"],
        "–û—Ä–µ–Ω–¥–∞/–∂–∏—Ç–ª–æ": None,
        "–ì–æ—Å–ø–æ–¥–∞—Ä—á—ñ —Ç–æ–≤–∞—Ä–∏": None,
        "–î–æ—Ä–æ–≥–∞/–ø–æ–¥–æ—Ä–æ–∂—ñ": ["–ú–∞—Ä—à—Ä—É—Ç–∫–∏", "–ê–≤—Ç–æ–±—É—Å–∏/–¥–∞–ª—å–Ω—ñ—Å—Ç—å"],
        "–û–Ω–ª–∞–π–Ω –ø—ñ–¥–ø–∏—Å–∫–∏": ["iCloud", "YouTube", "Prom"],
        "–ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –º–æ–±—ñ–ª—å–Ω–æ–≥–æ": None,
        "–†–æ–∑–≤–∞–≥–∏": None,
        "Vodafone": ["–ß–∞–π/–ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è", "–°—ñ–º-–∫–∞—Ä—Ç–∏"],
    },
    "üìà –Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó": {
        "–ö—Ä–∏–ø—Ç–∞": None,
        "–ó–∞—Ä—è–¥–Ω—ñ –ø—Ä–∏—Å—Ç—Ä–æ—ó": None,
        "Hub station": None,
        "–ê–∫–∞—É–Ω—Ç–∏": None,
        "–ö—É–ø—ñ–≤–ª—è $": None,
    },
    "üí∞ –ù–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è": {
        "–ó–∞—Ä–ø–ª–∞—Ç–∞": None,
        "–ü–µ—Ä–µ–∫–∞–∑": None,
        "–Ü–Ω—à–µ": None,
    },
}
CURRENCIES = ["–≥—Ä–Ω", "$"]
MONTHS = {
    1: "–°—ñ—á–µ–Ω—å", 2: "–õ—é—Ç–∏–π", 3: "–ë–µ—Ä–µ–∑–µ–Ω—å", 4: "–ö–≤—ñ—Ç–µ–Ω—å",
    5: "–¢—Ä–∞–≤–µ–Ω—å", 6: "–ß–µ—Ä–≤–µ–Ω—å", 7: "–õ–∏–ø–µ–Ω—å", 8: "–°–µ—Ä–ø–µ–Ω—å",
    9: "–í–µ—Ä–µ—Å–µ–Ω—å", 10: "–ñ–æ–≤—Ç–µ–Ω—å", 11: "–õ–∏—Å—Ç–æ–ø–∞–¥", 12: "–ì—Ä—É–¥–µ–Ω—å"
}
MONTHS_BY_NAME = {v: k for k, v in MONTHS.items()}

# ---------- STATES ----------
(
    NAME, CURRENCY_SETUP, TYPE, CATEGORY, SUBCATEGORY,
    AMOUNT, COMMENT,
    STAT_MODE, STAT_YEAR, STAT_MONTH, STAT_DAY
) = range(11)

# ---------- KEYBOARDS ----------
def kb(rows):
    return ReplyKeyboardMarkup([[KeyboardButton(x) for x in row] for row in rows], resize_keyboard=True)

def main_menu_kb():
    return kb([["üí∏ –í–∏—Ç—Ä–∞—Ç–∏", "üí∞ –ù–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è"], ["üìà –Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"], ["üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å"]])

def categories_kb(for_type):
    cats = list(CATEGORIES[for_type].keys())
    rows, row = [], []
    for c in cats:
        row.append(c)
        if len(row) == 2:
            rows.append(row); row = []
    if row: rows.append(row)
    rows.append(["‚Ü©Ô∏è –ù–∞–∑–∞–¥"])
    return kb(rows)

def subcategories_kb(for_type, category):
    subs = CATEGORIES[for_type][category]
    rows = []
    if subs:
        row = []
        for s in subs:
            row.append(s)
            if len(row) == 2:
                rows.append(row); row = []
        if row: rows.append(row)
    rows.append(["(–±–µ–∑ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó)", "‚Ü©Ô∏è –ù–∞–∑–∞–¥"])
    return kb(rows)

def currencies_kb():
    return kb([CURRENCIES, ["‚Ü©Ô∏è –ù–∞–∑–∞–¥"]])

def stat_mode_kb():
    return kb([["üìÖ –ó–∞ –¥–µ–Ω—å", "üìÖ –ó–∞ –º—ñ—Å—è—Ü—å"], ["‚Ü©Ô∏è –ù–∞–∑–∞–¥"]])

def years_kb():
    y = datetime.now().year
    return kb([[str(y), str(y-1)], ["‚Ü©Ô∏è –ù–∞–∑–∞–¥"]])

def months_kb():
    rows, row = [], []
    for m in range(1, 13):
        row.append(MONTHS[m])
        if len(row) == 3:
            rows.append(row); row = []
    if row: rows.append(row)
    rows.append(["‚Ü©Ô∏è –ù–∞–∑–∞–¥"])
    return kb(rows)

def days_kb(year: int, month: int):
    ndays = calendar.monthrange(year, month)[1]
    rows, row = [], []
    for d in range(1, ndays+1):
        row.append(str(d))
        if len(row) == 7:
            rows.append(row); row = []
    if row: rows.append(row)
    rows.append(["‚Ü©Ô∏è –ù–∞–∑–∞–¥"])
    return kb(rows)

# ---------- HELPERS ----------
def get_user(user_id: int):
    cur.execute("SELECT user_id, name, currency, created_at FROM users WHERE user_id=?", (user_id,))
    return cur.fetchone()

def create_or_update_user(user_id: int, name: str, currency: str):
    cur.execute("""
        INSERT INTO users (user_id, name, currency, created_at)
        VALUES (?, ?, ?, ?)
        ON CONFLICT(user_id) DO UPDATE SET name=excluded.name, currency=excluded.currency
    """, (user_id, name, currency, datetime.utcnow().isoformat()))
    conn.commit()

def save_tx(user_id, ttype, cat, sub, amount, currency, comment, date_str):
    cur.execute("""
        INSERT INTO transactions (user_id, type, category, subcategory, amount, currency, comment, date, created_at)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
    """, (user_id, ttype, cat, sub, amount, currency, comment, date_str, datetime.utcnow().isoformat()))
    conn.commit()

def fetch_day(user_id, y, m, d):
    date_str = f"{y:04d}-{m:02d}-{d:02d}"
    cur.execute("""SELECT type, category, subcategory, amount, currency, comment
                   FROM transactions WHERE user_id=? AND date=?""", (user_id, date_str))
    return cur.fetchall(), date_str

def fetch_month(user_id, y, m):
    cur.execute("""SELECT type, category, subcategory, amount, currency, comment
                   FROM transactions
                   WHERE user_id=? AND strftime('%Y', date)=? AND strftime('%m', date)=?""",
                (user_id, str(y), f"{m:02d}"))
    return cur.fetchall()

def build_stats_text(rows, title):
    if not rows:
        return f"{title}\nüì≠ –ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤."
    sums = {"üí∏ –í–∏—Ç—Ä–∞—Ç–∏": 0.0, "üí∞ –ù–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è": 0.0, "üìà –Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó": 0.0}
    lines = []
    for t, c, s, a, curx, com in rows:
        a = float(a or 0)
        sums[t] = sums.get(t, 0) + a
        lines.append(f"‚Ä¢ {t} | {c}/{s or '-'} ‚Äî {a:.2f} {curx} ({com or '-'})")
    total = "\n".join([f"{k}: {v:.2f}" for k, v in sums.items()])
    return f"{title}\n\n" + "\n".join(lines) + f"\n\n–ü—ñ–¥—Å—É–º–æ–∫:\n{total}"

def make_pdf(rows, title, filename):
    doc = SimpleDocTemplate(filename, pagesize=A4)
    styles = getSampleStyleSheet()
    if "Ukr" not in styles:
        styles.add(ParagraphStyle(name="Ukr", fontName="DejaVu", fontSize=12, leading=15))
    elements = [Paragraph(title, styles["Ukr"])]
    data = [["–¢–∏–ø", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è", "–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è", "–°—É–º–∞", "–í–∞–ª—é—Ç–∞", "–ö–æ–º–µ–Ω—Ç–∞—Ä"]]
    totals = {"üí∏ –í–∏—Ç—Ä–∞—Ç–∏": 0.0, "üí∞ –ù–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è": 0.0, "üìà –Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó": 0.0}
    for t, c, s, a, curx, com in rows:
        a = float(a or 0)
        totals[t] = totals.get(t, 0) + a
        data.append([t, c, s or "-", f"{a:.2f}", curx, com or "-"])
    data.append(["", "", "", "", "", ""])
    for k, v in totals.items():
        data.append([k, "", "", f"{v:.2f}", "", ""])
    table = Table(data, repeatRows=1, hAlign='LEFT')
    table.setStyle(TableStyle([
        ('FONTNAME', (0, 0), (-1, -1), 'DejaVu'),
        ('FONTSIZE', (0, 0), (-1, -1), 9),
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('GRID', (0, 0), (-1, -1), 0.5, colors.black),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
    ]))
    elements.append(table)
    doc.build(elements)

# ---------- HANDLERS ----------
INTRO_TEXT = (
    "‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å —Å—Ç–≤–æ—Ä–µ–Ω–æ!\n\n"
    "–¢–≤—ñ–π –æ—Å–æ–±–∏—Å—Ç–∏–π —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –∫–∞–±—ñ–Ω–µ—Ç –≥–æ—Ç–æ–≤–∏–π.\n\n"
    "–ú–æ–∂–ª–∏–≤–æ—Å—Ç—ñ:\n"
    "‚Ä¢ –î–æ–¥–∞–≤–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏, –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è —Ç–∞ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó\n"
    "‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –¥–µ–Ω—å —á–∏ –º—ñ—Å—è—Ü—å\n"
    "‚Ä¢ –ó–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ PDF-–∑–≤—ñ—Ç–∏\n"
    "‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å\n\n"
    "–û–±–µ—Ä–∏ –¥—ñ—é –Ω–∏–∂—á–µ üëá"
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    u = get_user(user_id)
    if not u:
        await update.message.reply_text("üëã –ü—Ä–∏–≤—ñ—Ç! –Ø–∫ –¥–æ —Ç–µ–±–µ –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—å?")
        return NAME
    await update.message.reply_text(f"üëã –ü—Ä–∏–≤—ñ—Ç, {u[1]}!\n\n{INTRO_TEXT}", reply_markup=main_menu_kb())
    return TYPE

async def save_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = (update.message.text or "").strip()
    if not name:
        await update.message.reply_text("–í–≤–µ–¥–∏ —ñ–º'—è üôÇ")
        return NAME
    context.user_data["name"] = name
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç—É:", reply_markup=currencies_kb())
    return CURRENCY_SETUP

async def save_currency(update: Update, context: ContextTypes.DEFAULT_TYPE):
    curx = update.message.text
    if curx not in CURRENCIES:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É –∑ –∫–Ω–æ–ø–æ–∫:", reply_markup=currencies_kb())
        return CURRENCY_SETUP
    create_or_update_user(update.effective_user.id, context.user_data["name"], curx)
    await update.message.reply_text(INTRO_TEXT, reply_markup=main_menu_kb())
    return TYPE

async def pick_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    t = update.message.text
    if t not in TYPES:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –∫–æ—Ä–∏—Å—Ç—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂—á–µ üëá", reply_markup=main_menu_kb())
        return TYPE
    if t == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º:", reply_markup=stat_mode_kb())
        return STAT_MODE
    if t == "üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å":
        u = get_user(update.effective_user.id)
        await update.message.reply_text(
            f"üë§ –ü—Ä–æ—Ñ—ñ–ª—å\n–Ü–º'—è: {u[1]}\n–í–∞–ª—é—Ç–∞: {u[2]}\n–ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ: {(u[3] or '')[:10]}",
            reply_markup=main_menu_kb()
        )
        return TYPE
    context.user_data["type"] = t
    await update.message.reply_text("–í–∏–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=categories_kb(t))
    return CATEGORY

async def pick_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    t = context.user_data.get("type")
    if text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        await update.message.reply_text("–ü–æ–≤–µ—Ä–Ω—É–≤—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())
        return TYPE
    if text not in CATEGORIES[t]:
        await update.message.reply_text("–û–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=categories_kb(t))
        return CATEGORY
    context.user_data["category"] = text
    subs = CATEGORIES[t][text]
    if subs:
        await update.message.reply_text("–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è:", reply_markup=subcategories_kb(t, text))
        return SUBCATEGORY
    context.user_data["subcategory"] = None
    await update.message.reply_text("–í–≤–µ–¥–∏ —Å—É–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 123.45):")
    return AMOUNT

async def pick_subcategory(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    t = context.user_data.get("type")
    c = context.user_data.get("category")
    if text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        await update.message.reply_text("–í–∏–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=categories_kb(t))
        return CATEGORY
    if text == "(–±–µ–∑ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó)":
        context.user_data["subcategory"] = None
    else:
        subs = CATEGORIES[t][c] or []
        if text not in subs:
            await update.message.reply_text("–û–±–µ—Ä–∏ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=subcategories_kb(t, c))
            return SUBCATEGORY
        context.user_data["subcategory"] = text
    await update.message.reply_text("–í–≤–µ–¥–∏ —Å—É–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 123.45):")
    return AMOUNT

async def pick_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.replace(",", ".").strip()
    try:
        amount = float(text)
    except ValueError:
        await update.message.reply_text("–°—É–º–∞ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑:")
        return AMOUNT
    context.user_data["amount"] = amount
    await update.message.reply_text("–î–æ–¥–∞–π –∫–æ–º–µ–Ω—Ç–∞—Ä –∞–±–æ '-' —è–∫—â–æ –±–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—è:")
    return COMMENT

async def pick_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    comment = update.message.text
    if comment == "-":
        comment = None
    user_id = update.effective_user.id
    u = get_user(user_id)
    ud = context.user_data
    date_str = datetime.now().strftime("%Y-%m-%d")
    save_tx(user_id, ud["type"], ud["category"], ud.get("subcategory"), ud["amount"], u[2], comment, date_str)
    await update.message.reply_text(
        f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {ud['type']} ‚Üí {ud['category']} ‚Üí {ud.get('subcategory', '-')}\n"
        f"–°—É–º–∞: {ud['amount']} {u[2]}\n–î–∞—Ç–∞: {date_str}",
        reply_markup=main_menu_kb()
    )
    ud.clear()
    return TYPE

# ---------- STATS ----------
async def stat_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    t = update.message.text
    if t == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        await update.message.reply_text("–ú–µ–Ω—é:", reply_markup=main_menu_kb())
        return TYPE
    if t not in ["üìÖ –ó–∞ –¥–µ–Ω—å", "üìÖ –ó–∞ –º—ñ—Å—è—Ü—å"]:
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º:", reply_markup=stat_mode_kb())
        return STAT_MODE
    context.user_data["stat_mode"] = t
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —Ä—ñ–∫:", reply_markup=years_kb())
    return STAT_YEAR

async def stat_year(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º:", reply_markup=stat_mode_kb())
        return STAT_MODE
    if not text.isdigit():
        await update.message.reply_text("–í–≤–µ–¥–∏ —Ä—ñ–∫ —á–∏—Å–ª–æ–º –∞–±–æ –æ–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É:", reply_markup=years_kb())
        return STAT_YEAR
    context.user_data["year"] = int(text)
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—è—Ü—å:", reply_markup=months_kb())
    return STAT_MONTH

async def stat_month(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —Ä—ñ–∫:", reply_markup=years_kb())
        return STAT_YEAR
    if text not in MONTHS_BY_NAME:
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—è—Ü—å –∑ –∫–Ω–æ–ø–æ–∫:", reply_markup=months_kb())
        return STAT_MONTH
    m = MONTHS_BY_NAME[text]
    context.user_data["month"] = m
    if context.user_data.get("stat_mode") == "üìÖ –ó–∞ –¥–µ–Ω—å":
        y = context.user_data["year"]
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å:", reply_markup=days_kb(y, m))
        return STAT_DAY
    user_id = update.effective_user.id
    rows = fetch_month(user_id, context.user_data["year"], m)
    title = f"üìÜ {MONTHS[m]} {context.user_data['year']}"
    await update.message.reply_text(build_stats_text(rows, title), reply_markup=kb([["üìÑ PDF"], ["‚Ü©Ô∏è –ù–∞–∑–∞–¥"], ["üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"]]))
    context.user_data["last_report"] = ("month", rows, title)
    return STAT_MONTH

async def stat_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—è—Ü—å:", reply_markup=months_kb())
        return STAT_MONTH
    if not text.isdigit():
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å:", reply_markup=days_kb(context.user_data["year"], context.user_data["month"]))
        return STAT_DAY
    d = int(text)
    y, m = context.user_data["year"], context.user_data["month"]
    rows, date_str = fetch_day(update.effective_user.id, y, m, d)
    title = f"üìÖ {d} {MONTHS[m]} {y}"
    await update.message.reply_text(build_stats_text(rows, title),
                                    reply_markup=kb([["üìÑ PDF"], ["‚Ü©Ô∏è –ù–∞–∑–∞–¥"], ["üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"]]))
    context.user_data["last_report"] = ("day", rows, title)
    return STAT_DAY

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ PDF –ø–æ –æ—Å—Ç–∞–Ω–Ω—å–æ–º—É –∑–≤—ñ—Ç—É
async def maybe_pdf(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if text == "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
        await update.message.reply_text("–ú–µ–Ω—é:", reply_markup=main_menu_kb())
        return TYPE
    if text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        # –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –∫—Ä–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if context.user_data.get("stat_mode") == "üìÖ –ó–∞ –¥–µ–Ω—å":
            await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å:",
                                            reply_markup=days_kb(context.user_data["year"], context.user_data["month"]))
            return STAT_DAY
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—è—Ü—å:", reply_markup=months_kb())
        return STAT_MONTH
    if text != "üìÑ PDF":
        # —ñ–≥–Ω–æ—Ä—É—î–º–æ –¥–æ–≤—ñ–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç –ø—ñ–¥ —á–∞—Å –µ–∫—Ä–∞–Ω–∞ –∑—ñ –∑–≤—ñ—Ç–æ–º
        return STAT_MONTH if context.user_data.get("stat_mode") == "üìÖ –ó–∞ –º—ñ—Å—è—Ü—å" else STAT_DAY

    payload = context.user_data.get("last_report")
    if not payload:
        await update.message.reply_text("–°–ø–µ—Ä—à—É —Å—Ñ–æ—Ä–º—É–π –∑–≤—ñ—Ç.", reply_markup=main_menu_kb())
        return TYPE
    _, rows, title = payload
    fname = "report.pdf"
    make_pdf(rows, title, fname)
    with open(fname, "rb") as f:
        await update.message.reply_document(document=InputFile(f, filename=fname), caption=title)
    # –∑–∞–ª–∏—à–∞—î–º–æ —É —Ç–æ–º—É –∂ —Å—Ç–∞–Ω—ñ
    return STAT_MONTH if context.user_data.get("stat_mode") == "üìÖ –ó–∞ –º—ñ—Å—è—Ü—å" else STAT_DAY

# ---------- APP ----------
def build_app():
    app = Application.builder().token(BOT_TOKEN).build()
    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_name)],
            CURRENCY_SETUP: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_currency)],

            TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, pick_type)],

            CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, pick_category)],
            SUBCATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, pick_subcategory)],
            AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, pick_amount)],
            COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, pick_comment)],

            STAT_MODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, stat_mode)],
            STAT_YEAR: [MessageHandler(filters.TEXT & ~filters.COMMAND, stat_year)],
            STAT_MONTH: [MessageHandler(filters.TEXT & ~filters.COMMAND, stat_month),
                         MessageHandler(filters.Regex("^üìÑ PDF|‚Ü©Ô∏è –ù–∞–∑–∞–¥|üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é$"), maybe_pdf)],
            STAT_DAY: [MessageHandler(filters.TEXT & ~filters.COMMAND, stat_day),
                       MessageHandler(filters.Regex("^üìÑ PDF|‚Ü©Ô∏è –ù–∞–∑–∞–¥|üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é$"), maybe_pdf)],
        },
        fallbacks=[],
        allow_reentry=True,
    )
    app.add_handler(conv)
    return app

def main():
    app = build_app()
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
