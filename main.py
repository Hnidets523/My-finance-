import os
import sqlite3
from datetime import datetime, timedelta
from telegram import (
    Update, ReplyKeyboardMarkup, KeyboardButton, InputFile
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ConversationHandler,
    ContextTypes, filters
)
from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph
from reportlab.lib.styles import getSampleStyleSheet

# ======== CONFIG ========
BOT_TOKEN = "–¢–í–û–ô_–¢–û–ö–ï–ù"  # <-- –í–°–¢–ê–í –°–Æ–î–ê –°–í–û–ô –¢–û–ö–ï–ù!
DB_PATH = "finance.db"
pdfmetrics.registerFont(TTFont('DejaVu', 'DejaVuSans.ttf'))

# ======== –°–¢–ê–ù–ò ========
TYPE, CATEGORY, SUBCATEGORY, AMOUNT, CURRENCY, COMMENT, NAME, CURRENCY_SETUP = range(8)

# ======== –ö–ê–¢–ï–ì–û–†–Ü–á ========
TYPES = ["üí∏ –í–∏—Ç—Ä–∞—Ç–∏", "üí∞ –ù–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è", "üìà –Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó"]

CATEGORIES = {
    "üí∏ –í–∏—Ç—Ä–∞—Ç–∏": {
        "–•–∞—Ä—á—É–≤–∞–Ω–Ω—è": ["–ö–∞—Ñ–µ", "–°—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç/—Ä–∏–Ω–æ–∫", "–ì—É–ª—å–∫–∏", "–¢—Ä–∞—Ç–∏ –Ω–∞ —Ä–æ–±–æ—Ç—ñ"],
        "–û–¥—è–≥ —Ç–∞ –≤–∑—É—Ç—Ç—è": ["–°–µ–∫–æ–Ω–¥", "–§—ñ–∑–∏—á–Ω–∏–π –º–∞–≥–∞–∑–∏–Ω", "–û–Ω–ª–∞–π–Ω"],
        "–û—Ä–µ–Ω–¥–∞/–∂–∏—Ç–ª–æ": None,
        "–ì–æ—Å–ø–æ–¥–∞—Ä—á—ñ —Ç–æ–≤–∞—Ä–∏": None,
        "–î–æ—Ä–æ–≥–∞/–ø–æ–¥–æ—Ä–æ–∂—ñ": ["–ú–∞—Ä—à—Ä—É—Ç–∫–∏", "–ê–≤—Ç–æ–±—É—Å–∏/–¥–∞–ª—å–Ω—ñ—Å—Ç—å"],
        "–û–Ω–ª–∞–π–Ω –ø—ñ–¥–ø–∏—Å–∫–∏": ["iCloud", "YouTube", "Prom"],
        "–ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –º–æ–±—ñ–ª—å–Ω–æ–≥–æ": None,
        "–†–æ–∑–≤–∞–≥–∏": None,
        "Vodafone": ["–ß–∞–π/–ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è", "–°—ñ–º-–∫–∞—Ä—Ç–∏"],
    },
    "üìà –Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó": {
        "–ö—Ä–∏–ø—Ç–∞": None,
        "–ó–∞—Ä—è–¥–Ω—ñ –ø—Ä–∏—Å—Ç—Ä–æ—ó": None,
        "Hub station": None,
        "–ê–∫–∞—É–Ω—Ç–∏": None,
        "–ö—É–ø—ñ–≤–ª—è $": None,
    },
    "üí∞ –ù–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è": {
        "–ó–∞—Ä–ø–ª–∞—Ç–∞": None,
        "–ü–µ—Ä–µ–∫–∞–∑": None,
        "–Ü–Ω—à–µ": None,
    },
}

CURRENCIES = ["–≥—Ä–Ω", "$"]

# ======== –ë–î ========
conn = sqlite3.connect(DB_PATH, check_same_thread=False)
cur = conn.cursor()
cur.execute("""
CREATE TABLE IF NOT EXISTS transactions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    type TEXT,
    category TEXT,
    subcategory TEXT,
    amount REAL,
    currency TEXT,
    comment TEXT,
    date TEXT,
    created_at TEXT
)
""")
cur.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    name TEXT,
    currency TEXT
)
""")
conn.commit()

# ======== –ö–õ–ê–í–Ü–ê–¢–£–†–ò ========
def kb(rows):
    return ReplyKeyboardMarkup([[KeyboardButton(x) for x in row] for row in rows], resize_keyboard=True)

def main_menu_kb():
    return kb([["üí∏ –í–∏—Ç—Ä–∞—Ç–∏", "üí∞ –ù–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è"], ["üìà –Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó"], ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å"]])

def categories_kb(for_type):
    cats = list(CATEGORIES[for_type].keys())
    rows, row = [], []
    for c in cats:
        row.append(c)
        if len(row) == 2:
            rows.append(row)
            row = []
    if row: rows.append(row)
    rows.append(["‚Ü©Ô∏è –ù–∞–∑–∞–¥"])
    return kb(rows)

def subcategories_kb(for_type, category):
    subs = CATEGORIES[for_type][category]
    rows = []
    if subs:
        row = []
        for s in subs:
            row.append(s)
            if len(row) == 2:
                rows.append(row)
                row = []
        if row: rows.append(row)
    rows.append(["(–±–µ–∑ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó)", "‚Ü©Ô∏è –ù–∞–∑–∞–¥"])
    return kb(rows)

def currencies_kb():
    return kb([CURRENCIES, ["‚Ü©Ô∏è –ù–∞–∑–∞–¥"]])

# ======== –§–£–ù–ö–¶–Ü–á ========
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    cur.execute("SELECT * FROM users WHERE user_id=?", (user_id,))
    user = cur.fetchone()
    if not user:
        await update.message.reply_text("üëã –ü—Ä–∏–≤—ñ—Ç! –Ø ‚Äî —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –±–æ—Ç. –î–∞–≤–∞–π –ø–æ–∑–Ω–∞–π–æ–º–∏–º–æ—Å—å.\n–Ø–∫ –¥–æ —Ç–µ–±–µ –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—å?")
        return NAME
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤—ñ—Ç –∑–Ω–æ–≤—É! –û–±–µ—Ä–∏ –¥—ñ—é üëá", reply_markup=main_menu_kb()
    )
    return TYPE

async def save_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text
    context.user_data["name"] = name
    await update.message.reply_text(f"–ü—Ä–∏—î–º–Ω–æ –ø–æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å, {name}! –û–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É:", reply_markup=currencies_kb())
    return CURRENCY_SETUP

async def save_currency(update: Update, context: ContextTypes.DEFAULT_TYPE):
    currency = update.message.text
    if currency not in CURRENCIES:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É –∑ –∫–Ω–æ–ø–æ–∫:", reply_markup=currencies_kb())
        return CURRENCY_SETUP
    user_id = update.effective_user.id
    name = context.user_data["name"]
    cur.execute("INSERT OR REPLACE INTO users (user_id, name, currency) VALUES (?, ?, ?)", (user_id, name, currency))
    conn.commit()
    await update.message.reply_text(
        f"‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å —Å—Ç–≤–æ—Ä–µ–Ω–æ!\n\n"
        f"–¢–≤—ñ–π –æ—Å–æ–±–∏—Å—Ç–∏–π —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –∫–∞–±—ñ–Ω–µ—Ç –≥–æ—Ç–æ–≤–∏–π.\n\n"
        f"–ú–æ–∂–ª–∏–≤–æ—Å—Ç—ñ:\n"
        f"‚Ä¢ –î–æ–¥–∞–≤–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏, –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è —Ç–∞ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó\n"
        f"‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –¥–µ–Ω—å —á–∏ –º—ñ—Å—è—Ü—å\n"
        f"‚Ä¢ –ó–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ PDF-–∑–≤—ñ—Ç–∏\n"
        f"‚Ä¢ –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —ñ–º'—è —Ç–∞ –≤–∞–ª—é—Ç—É\n\n"
        f"–û–±–µ—Ä–∏ –¥—ñ—é –Ω–∏–∂—á–µ üëá",
        reply_markup=main_menu_kb()
    )
    return TYPE

def save_tx(user_id, ttype, cat, sub, amount, currency, comment, date_str):
    cur.execute("""
        INSERT INTO transactions (user_id, type, category, subcategory, amount, currency, comment, date, created_at)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
    """, (user_id, ttype, cat, sub, amount, currency, comment, date_str, datetime.utcnow().isoformat()))
    conn.commit()

async def pick_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    t = update.message.text
    if t not in TYPES and t not in ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å"]:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ:", reply_markup=main_menu_kb())
        return TYPE
    if t == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await show_statistics(update, context)
        return TYPE
    if t == "üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å":
        await show_profile(update)
        return TYPE
    context.user_data["type"] = t
    await update.message.reply_text("–í–∏–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=categories_kb(t))
    return CATEGORY

async def pick_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    t = context.user_data.get("type")
    if text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        await update.message.reply_text("–ü–æ–≤–µ—Ä–Ω—É–≤—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())
        return TYPE
    if text not in CATEGORIES[t]:
        await update.message.reply_text("–û–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=categories_kb(t))
        return CATEGORY
    context.user_data["category"] = text
    subs = CATEGORIES[t][text]
    if subs:
        await update.message.reply_text("–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è:", reply_markup=subcategories_kb(t, text))
        return SUBCATEGORY
    context.user_data["subcategory"] = None
    await update.message.reply_text("–í–≤–µ–¥–∏ —Å—É–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 123.45):")
    return AMOUNT

async def pick_subcategory(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    t = context.user_data.get("type")
    c = context.user_data.get("category")
    if text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        await update.message.reply_text("–í–∏–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=categories_kb(t))
        return CATEGORY
    if text == "(–±–µ–∑ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó)":
        context.user_data["subcategory"] = None
    else:
        subs = CATEGORIES[t][c] or []
        if text not in subs:
            await update.message.reply_text("–û–±–µ—Ä–∏ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=subcategories_kb(t, c))
            return SUBCATEGORY
        context.user_data["subcategory"] = text
    await update.message.reply_text("–í–≤–µ–¥–∏ —Å—É–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 123.45):")
    return AMOUNT

async def pick_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.replace(",", ".").strip()
    try:
        amount = float(text)
    except ValueError:
        await update.message.reply_text("–°—É–º–∞ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑:")
        return AMOUNT
    context.user_data["amount"] = amount
    await update.message.reply_text("–î–æ–¥–∞–π –∫–æ–º–µ–Ω—Ç–∞—Ä –∞–±–æ '-' —è–∫—â–æ –±–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—è:")
    return COMMENT

async def pick_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    comment = update.message.text
    if comment == "-":
        comment = None
    user_id = update.effective_user.id
    cur.execute("SELECT currency FROM users WHERE user_id=?", (user_id,))
    user_currency = cur.fetchone()[0]
    ud = context.user_data
    date_str = datetime.now().strftime("%Y-%m-%d")
    save_tx(user_id, ud["type"], ud["category"], ud.get("subcategory"), ud["amount"], user_currency, comment, date_str)
    await update.message.reply_text(
        f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {ud['type']} ‚Üí {ud['category']} ‚Üí {ud.get('subcategory', '')}\n"
        f"–°—É–º–∞: {ud['amount']} {user_currency}\n–î–∞—Ç–∞: {date_str}",
        reply_markup=main_menu_kb()
    )
    ud.clear()
    return TYPE

async def show_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    cur.execute("SELECT * FROM transactions WHERE user_id=?", (user_id,))
    rows = cur.fetchall()
    if not rows:
        await update.message.reply_text("üìä –£ —Ç–µ–±–µ —â–µ –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤.", reply_markup=main_menu_kb())
        return
    today = datetime.now().strftime("%Y-%m-%d")
    cur.execute("SELECT SUM(amount) FROM transactions WHERE user_id=? AND type='üí∏ –í–∏—Ç—Ä–∞—Ç–∏' AND date=?", (user_id, today))
    expenses = cur.fetchone()[0] or 0
    cur.execute("SELECT SUM(amount) FROM transactions WHERE user_id=? AND type='üí∞ –ù–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è' AND date=?", (user_id, today))
    income = cur.fetchone()[0] or 0
    await update.message.reply_text(
        f"üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {today}:\nüí∞ –ù–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è: {income}\nüí∏ –í–∏—Ç—Ä–∞—Ç–∏: {expenses}",
        reply_markup=main_menu_kb()
    )

async def show_profile(update: Update):
    user_id = update.effective_user.id
    cur.execute("SELECT name, currency FROM users WHERE user_id=?", (user_id,))
    user = cur.fetchone()
    if user:
        await update.message.reply_text(
            f"üë§ –¢–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å:\n–Ü–º'—è: {user[0]}\n–í–∞–ª—é—Ç–∞: {user[1]}",
            reply_markup=main_menu_kb()
        )
    else:
        await update.message.reply_text("–ü—Ä–æ—Ñ—ñ–ª—å —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ. –ù–∞–ø–∏—à–∏ /start", reply_markup=main_menu_kb())

# ======== APP ========
def build_app():
    app = Application.builder().token(BOT_TOKEN).build()
    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_name)],
            CURRENCY_SETUP: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_currency)],
            TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, pick_type)],
            CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, pick_category)],
            SUBCATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, pick_subcategory)],
            AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, pick_amount)],
            COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, pick_comment)],
        },
        fallbacks=[],
        allow_reentry=True,
    )
    app.add_handler(conv)
    return app

def main():
    app = build_app()
    app.run_polling()

if __name__ == "__main__":
    main()
