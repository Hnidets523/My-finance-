import sqlite3
from datetime import datetime
import calendar
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InputFile
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes, filters,
    ConversationHandler
)

# PDF
from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph

# ====== CONFIG ======
BOT_TOKEN = "8420371366:AAG9UfAnEqKyrk5v1DOPHvh7hlp1ZDtHJy8"  # —Ç–≤—ñ–π —Ç–æ–∫–µ–Ω
ONLY_USER_ID = None  # –∑–∞ –±–∞–∂–∞–Ω–Ω—è–º: –≤–∫–∞–∂–∏ —Å–≤—ñ–π Telegram ID, —â–æ–± –æ–±–º–µ–∂–∏—Ç–∏ –¥–æ—Å—Ç—É–ø

TYPES = ["üí∏ –í–∏—Ç—Ä–∞—Ç–∏", "üí∞ –ù–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è", "üìà –Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]

MONTH_NAMES = {
    "01": "–°—ñ—á–µ–Ω—å", "02": "–õ—é—Ç–∏–π", "03": "–ë–µ—Ä–µ–∑–µ–Ω—å", "04": "–ö–≤—ñ—Ç–µ–Ω—å",
    "05": "–¢—Ä–∞–≤–µ–Ω—å", "06": "–ß–µ—Ä–≤–µ–Ω—å", "07": "–õ–∏–ø–µ–Ω—å", "08": "–°–µ—Ä–ø–µ–Ω—å",
    "09": "–í–µ—Ä–µ—Å–µ–Ω—å", "10": "–ñ–æ–≤—Ç–µ–Ω—å", "11": "–õ–∏—Å—Ç–æ–ø–∞–¥", "12": "–ì—Ä—É–¥–µ–Ω—å"
}

CATEGORIES = {
    "üí∏ –í–∏—Ç—Ä–∞—Ç–∏": {
        "–•–∞—Ä—á—É–≤–∞–Ω–Ω—è": ["–ö–∞—Ñ–µ", "–°—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç/—Ä–∏–Ω–æ–∫", "–ì—É–ª—å–∫–∏", "–¢—Ä–∞—Ç–∏ –Ω–∞ —Ä–æ–±–æ—Ç—ñ"],
        "–û–¥—è–≥ —Ç–∞ –≤–∑—É—Ç—Ç—è": ["–°–µ–∫–æ–Ω–¥", "–§—ñ–∑–∏—á–Ω–∏–π –º–∞–≥–∞–∑–∏–Ω", "–û–Ω–ª–∞–π–Ω"],
        "–û—Ä–µ–Ω–¥–∞/–∂–∏—Ç–ª–æ": None,
        "–ì–æ—Å–ø–æ–¥–∞—Ä—á—ñ —Ç–æ–≤–∞—Ä–∏": None,
        "–î–æ—Ä–æ–≥–∞/–ø–æ–¥–æ—Ä–æ–∂—ñ": ["–ú–∞—Ä—à—Ä—É—Ç–∫–∏", "–ê–≤—Ç–æ–±—É—Å–∏/–¥–∞–ª—å–Ω—ñ—Å—Ç—å"],
        "–û–Ω–ª–∞–π–Ω –ø—ñ–¥–ø–∏—Å–∫–∏": ["iCloud", "YouTube", "Prom"],
        "–ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –º–æ–±—ñ–ª—å–Ω–æ–≥–æ": None,
        "–†–æ–∑–≤–∞–≥–∏": None,
        "Vodafone": ["–ß–∞–π/–ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è", "–°—ñ–º-–∫–∞—Ä—Ç–∏"],
    },
    "üìà –Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó": {
        "–ö—Ä–∏–ø—Ç–∞": None,
        "–ó–∞—Ä—è–¥–Ω—ñ –ø—Ä–∏—Å—Ç—Ä–æ—ó": None,
        "Hub station": None,
        "–ê–∫–∞—É–Ω—Ç–∏": None,
        "–ö—É–ø—ñ–≤–ª—è $": None,
    },
    "üí∞ –ù–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è": {
        "–ó–∞—Ä–ø–ª–∞—Ç–∞": None,
        "–ü–µ—Ä–µ–∫–∞–∑": None,
        "–Ü–Ω—à–µ": None,
    },
}

CURRENCIES = ["–≥—Ä–Ω", "$"]
STATS_MODES = ["üìÜ –ó–∞ –º—ñ—Å—è—Ü—å", "üìÖ –ó–∞ –¥–µ–Ω—å", "‚Ü©Ô∏è –ù–∞–∑–∞–¥"]
PDF_OPTION = ["üìÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ PDF-–∑–≤—ñ—Ç", "‚Ü©Ô∏è –ù–∞–∑–∞–¥"]

# ====== DB ======
DB_PATH = "finance.db"
conn = sqlite3.connect(DB_PATH, check_same_thread=False)
cur = conn.cursor()
cur.execute("""
CREATE TABLE IF NOT EXISTS transactions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    type TEXT,
    category TEXT,
    subcategory TEXT,
    amount REAL,
    currency TEXT,
    comment TEXT,
    date TEXT,
    created_at TEXT
)
""")
conn.commit()

# ====== STATES ======
TYPE, CATEGORY, SUBCATEGORY, AMOUNT, CURRENCY, COMMENT, STATS_MODE, YEAR, MONTH, DAY, PDF = range(11)

# ====== KEYBOARDS ======
def kb(rows):
    return ReplyKeyboardMarkup([[KeyboardButton(x) for x in row] for row in rows], resize_keyboard=True)

def main_menu_kb():
    return kb([TYPES])

def categories_kb(for_type):
    cats = list(CATEGORIES[for_type].keys())
    rows, row = [], []
    for c in cats:
        row.append(c)
        if len(row) == 2:
            rows.append(row); row = []
    if row: rows.append(row)
    rows.append(["‚Ü©Ô∏è –ù–∞–∑–∞–¥"])
    return kb(rows)

def subcategories_kb(for_type, category):
    subs = CATEGORIES[for_type][category]
    rows = []
    if subs:
        row = []
        for s in subs:
            row.append(s)
            if len(row) == 2:
                rows.append(row); row = []
        if row: rows.append(row)
    rows.append(["(–±–µ–∑ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó)", "‚Ü©Ô∏è –ù–∞–∑–∞–¥"])
    return kb(rows)

def currencies_kb():
    return kb([CURRENCIES, ["‚Ü©Ô∏è –ù–∞–∑–∞–¥"]])

def stats_modes_kb():
    return kb([STATS_MODES])

def years_kb():
    now = datetime.now()
    years = [str(y) for y in range(now.year - 2, now.year + 1)]
    return kb([years, ["‚Ü©Ô∏è –ù–∞–∑–∞–¥"]])

def months_kb():
    months = [
        ["–°—ñ—á–µ–Ω—å", "–õ—é—Ç–∏–π", "–ë–µ—Ä–µ–∑–µ–Ω—å"],
        ["–ö–≤—ñ—Ç–µ–Ω—å", "–¢—Ä–∞–≤–µ–Ω—å", "–ß–µ—Ä–≤–µ–Ω—å"],
        ["–õ–∏–ø–µ–Ω—å", "–°–µ—Ä–ø–µ–Ω—å", "–í–µ—Ä–µ—Å–µ–Ω—å"],
        ["–ñ–æ–≤—Ç–µ–Ω—å", "–õ–∏—Å—Ç–æ–ø–∞–¥", "–ì—Ä—É–¥–µ–Ω—å"]
    ]
    months.append(["‚Ü©Ô∏è –ù–∞–∑–∞–¥"])
    return kb(months)

def month_to_number(name):
    for num, n in MONTH_NAMES.items():
        if n == name:
            return num
    return "01"

def days_kb(year, month):
    days_in_month = calendar.monthrange(int(year), int(month))[1]
    days = [str(i) for i in range(1, days_in_month + 1)]
    rows = [days[i:i+7] for i in range(0, len(days), 7)]
    rows.append(["‚Ü©Ô∏è –ù–∞–∑–∞–¥"])
    return kb(rows)

# ====== DB HELPERS ======
def fetch_transactions(user_id, year, month=None, day=None):
    if day:
        date_str = f"{year}-{month}-{day.zfill(2)}"
        query = "SELECT type, category, subcategory, amount, currency, comment FROM transactions WHERE user_id=? AND date=?"
        params = (user_id, date_str)
    else:
        query = """
            SELECT type, category, subcategory, amount, currency, comment FROM transactions
            WHERE user_id=? AND strftime('%Y', date)=? AND strftime('%m', date)=?
        """
        params = (user_id, str(year), str(month).zfill(2))
    cur.execute(query, params)
    return cur.fetchall()

def save_tx(user_id, ttype, cat, sub, amount, currency, comment, date_str):
    cur.execute("""
        INSERT INTO transactions (user_id, type, category, subcategory, amount, currency, comment, date, created_at)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
    """, (user_id, ttype, cat, sub, amount, currency, comment, date_str, datetime.utcnow().isoformat()))
    conn.commit()

# ====== PDF ======
def generate_pdf(transactions, filename, title):
    doc = SimpleDocTemplate(filename, pagesize=A4)
    styles = getSampleStyleSheet()
    elements = [Paragraph(title, styles["Heading1"])]

    data = [["–¢–∏–ø", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è", "–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è", "–°—É–º–∞", "–í–∞–ª—é—Ç–∞", "–ö–æ–º–µ–Ω—Ç–∞—Ä"]]
    total = {"üí∏ –í–∏—Ç—Ä–∞—Ç–∏": 0, "üí∞ –ù–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è": 0, "üìà –Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó": 0}

    for t, cat, sub, amt, curr, com in transactions:
        total[t] += amt
        data.append([t, cat, sub if sub else "-", f"{amt:.2f}", curr, com if com else "-"])

    # –ü–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫ —ñ –ø—ñ–¥—Å—É–º–∫–∏
    data.append(["", "", "", "", "", ""])
    for t in total:
        data.append([t, "", "", f"{total[t]:.2f}", "", ""])

    table = Table(data, repeatRows=1)
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
    ]))
    elements.append(table)
    doc.build(elements)

# ====== STATS TEXT ======
def get_detailed_stats_text(user_id, year, month=None, day=None):
    transactions = fetch_transactions(user_id, year, month, day)

    if day:
        title = f"üìÖ –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {day.zfill(2)} {MONTH_NAMES[month]} {year}:"
    else:
        title = f"üìÜ –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {MONTH_NAMES[month]} {year}:"

    if not transactions:
        return title + "\nüì≠ –ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤.", transactions

    summary = {t: 0 for t in ["üí∏ –í–∏—Ç—Ä–∞—Ç–∏", "üí∞ –ù–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è", "üìà –Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó"]}
    lines = []
    for t, cat, sub, amt, curr, com in transactions:
        summary[t] += amt
        lines.append(f"- {t} | {cat} / {sub if sub else '-'}: {amt:.2f} {curr} ({com if com else '-'})")

    totals = "\n".join([f"{t}: {summary[t]:.2f}" for t in summary])
    text = f"{title}\n\n" + "\n".join(lines) + f"\n\n–ü—ñ–¥—Å—É–º–æ–∫:\n{totals}"
    return text, transactions

# ====== GUARDS (–æ–ø—Ü—ñ–π–Ω–æ –æ–±–º–µ–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞) ======
def is_allowed(user_id: int) -> bool:
    return (ONLY_USER_ID is None) or (user_id == ONLY_USER_ID)

# ====== HANDLERS ======
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed(update.effective_user.id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –æ–±–º–µ–∂–µ–Ω–æ.")
        return ConversationHandler.END

    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø ‚Äî —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –±–æ—Ç –¥–ª—è –æ–±–ª—ñ–∫—É –≤–∏—Ç—Ä–∞—Ç, –¥–æ—Ö–æ–¥—ñ–≤ —Ç–∞ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π.\n"
        "üí∏ –î–æ–¥–∞–≤–∞–π –≤–∏—Ç—Ä–∞—Ç–∏\nüí∞ –§—ñ–∫—Å—É–π –¥–æ—Ö–æ–¥–∏\nüìà –û–±–ª—ñ–∫ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π\nüìä –ü–µ—Ä–µ–≥–ª—è–¥–∞–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\n"
        "–ó–∞—Å–Ω–æ–≤–Ω–∏–∫: @hnidets011",
        reply_markup=main_menu_kb()
    )
    return TYPE

async def pick_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    t = update.message.text
    if t == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º:", reply_markup=stats_modes_kb())
        return STATS_MODE
    if t not in TYPES:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∫–Ω–æ–ø–∫—É:", reply_markup=main_menu_kb())
        return TYPE
    context.user_data["type"] = t
    await update.message.reply_text("–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=categories_kb(t))
    return CATEGORY

async def choose_stats_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    mode = update.message.text
    if mode == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        await update.message.reply_text("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())
        return TYPE
    context.user_data["stats_mode"] = mode
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —Ä—ñ–∫:", reply_markup=years_kb())
    return YEAR

async def choose_year(update: Update, context: ContextTypes.DEFAULT_TYPE):
    year = update.message.text
    if year == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        await update.message.reply_text("–ü–æ–≤–µ—Ä–Ω—É–≤—Å—è –¥–æ —Ä–µ–∂–∏–º—ñ–≤:", reply_markup=stats_modes_kb())
        return STATS_MODE
    context.user_data["year"] = year
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—è—Ü—å:", reply_markup=months_kb())
    return MONTH

async def choose_month(update: Update, context: ContextTypes.DEFAULT_TYPE):
    month_name = update.message.text
    if month_name == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        await update.message.reply_text("–ü–æ–≤–µ—Ä–Ω—É–≤—Å—è –¥–æ –≤–∏–±–æ—Ä—É —Ä–æ–∫—É:", reply_markup=years_kb())
        return YEAR

    month_num = month_to_number(month_name)
    context.user_data["month"] = month_num

    if context.user_data.get("stats_mode") == "üìÜ –ó–∞ –º—ñ—Å—è—Ü—å":
        text, transactions = get_detailed_stats_text(update.effective_user.id, context.user_data["year"], month_num)
        context.user_data["transactions"] = transactions
        context.user_data["day"] = None
        await update.message.reply_text(text, reply_markup=kb([PDF_OPTION]))
        return PDF

    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å:", reply_markup=days_kb(context.user_data["year"], month_num))
    return DAY

async def choose_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    day = update.message.text
    if day == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        await update.message.reply_text("–ü–æ–≤–µ—Ä–Ω—É–≤—Å—è –¥–æ –≤–∏–±–æ—Ä—É –º—ñ—Å—è—Ü—è:", reply_markup=months_kb())
        return MONTH

    text, transactions = get_detailed_stats_text(
        update.effective_user.id,
        context.user_data["year"],
        context.user_data["month"],
        day
    )
    context.user_data["transactions"] = transactions
    context.user_data["day"] = day
    await update.message.reply_text(text, reply_markup=kb([PDF_OPTION]))
    return PDF

async def pdf_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text
    if choice == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        await update.message.reply_text("–ü–æ–≤–µ—Ä–Ω—É–≤—Å—è –¥–æ —Ä–µ–∂–∏–º—ñ–≤:", reply_markup=stats_modes_kb())
        return STATS_MODE

    if choice != "üìÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ PDF-–∑–≤—ñ—Ç":
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=kb([PDF_OPTION]))
        return PDF

    transactions = context.user_data.get("transactions", [])
    if not transactions:
        await update.message.reply_text("üì≠ –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è PDF.")
        return STATS_MODE

    year = context.user_data.get("year")
    month = context.user_data.get("month")
    day = context.user_data.get("day")

    title = (
        f"–ó–≤—ñ—Ç –∑–∞ {day.zfill(2)} {MONTH_NAMES[month]} {year}"
        if day else f"–ó–≤—ñ—Ç –∑–∞ {MONTH_NAMES[month]} {year}"
    )
    filename = "report.pdf"
    generate_pdf(transactions, filename, title)

    with open(filename, "rb") as f:
        await update.message.reply_document(InputFile(f, filename))
    await update.message.reply_text("‚úÖ –û—Å—å –≤–∞—à PDF-–∑–≤—ñ—Ç", reply_markup=stats_modes_kb())
    return STATS_MODE

# ==== –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π ====
async def pick_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    t = context.user_data.get("type")
    if text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        await update.message.reply_text("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())
        return TYPE
    if t not in CATEGORIES or text not in CATEGORIES[t]:
        await update.message.reply_text("–û–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=categories_kb(t))
        return CATEGORY
    context.user_data["category"] = text
    subs = CATEGORIES[t][text]
    if subs:
        await update.message.reply_text("–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è:", reply_markup=subcategories_kb(t, text))
        return SUBCATEGORY
    context.user_data["subcategory"] = None
    await update.message.reply_text("–í–≤–µ–¥–∏ —Å—É–º—É:")
    return AMOUNT

async def pick_subcategory(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    t = context.user_data.get("type")
    c = context.user_data.get("category")
    if text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        await update.message.reply_text("–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó:", reply_markup=categories_kb(t))
        return CATEGORY
    if text == "(–±–µ–∑ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó)":
        context.user_data["subcategory"] = None
    else:
        subs = CATEGORIES[t][c] or []
        if text not in subs:
            await update.message.reply_text("–û–±–µ—Ä–∏ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=subcategories_kb(t, c))
            return SUBCATEGORY
        context.user_data["subcategory"] = text
    await update.message.reply_text("–í–≤–µ–¥–∏ —Å—É–º—É:")
    return AMOUNT

async def pick_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.replace(",", ".").strip()
    try:
        amount = float(text)
    except ValueError:
        await update.message.reply_text("–°—É–º–∞ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º:")
        return AMOUNT
    context.user_data["amount"] = amount
    await update.message.reply_text("üí± –û–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É:", reply_markup=currencies_kb())
    return CURRENCY

async def pick_currency(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        await update.message.reply_text("–í–≤–µ–¥–∏ —Å—É–º—É —â–µ —Ä–∞–∑:")
        return AMOUNT
    if text not in CURRENCIES:
        await update.message.reply_text("–û–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É:", reply_markup=currencies_kb())
        return CURRENCY
    context.user_data["currency"] = text
    await update.message.reply_text("üìù –î–æ–¥–∞–π –∫–æ–º–µ–Ω—Ç–∞—Ä –∞–±–æ –Ω–∞–ø–∏—à–∏ '-' —è–∫—â–æ –±–µ–∑:", reply_markup=kb([["-"]]))
    return COMMENT

async def pick_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    comment = update.message.text
    if comment.strip() == "-":
        comment = None
    ud = context.user_data
    date_str = datetime.now().strftime("%Y-%m-%d")
    save_tx(
        update.effective_user.id,
        ud["type"],
        ud["category"],
        ud.get("subcategory"),
        ud["amount"],
        ud["currency"],
        comment,
        date_str
    )
    await update.message.reply_text(
        f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ:\n{ud['type']} ‚Üí {ud['category']} ‚Üí {ud.get('subcategory', '-')}\n"
        f"–°—É–º–∞: {ud['amount']} {ud['currency']}\n–î–∞—Ç–∞: {date_str}\n–ö–æ–º–µ–Ω—Ç–∞—Ä: {comment if comment else '-'}"
    )
    ud.clear()
    await update.message.reply_text("–©–æ –¥–∞–ª—ñ?", reply_markup=main_menu_kb())
    return TYPE

# ====== APP START ======
def build_app():
    app = Application.builder().token(BOT_TOKEN).build()
    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, pick_type)],
            STATS_MODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_stats_mode)],
            YEAR: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_year)],
            MONTH: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_month)],
            DAY: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_day)],
            PDF: [MessageHandler(filters.TEXT & ~filters.COMMAND, pdf_menu)],
            CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, pick_category)],
            SUBCATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, pick_subcategory)],
            AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, pick_amount)],
            CURRENCY: [MessageHandler(filters.TEXT & ~filters.COMMAND, pick_currency)],
            COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, pick_comment)],
        },
        fallbacks=[],
        allow_reentry=True,
    )
    app.add_handler(conv)
    return app

def main():
    app = build_app()
    app.run_polling()

if __name__ == "__main__":
    main()
