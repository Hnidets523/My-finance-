import os
import sqlite3
import calendar
import random
import requests
from collections import defaultdict
from datetime import datetime

from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton, InputFile
)
from telegram.ext import (
    Application, CommandHandler, ConversationHandler,
    MessageHandler, CallbackQueryHandler, ContextTypes, filters
)

# ==== PDF ====
from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle

# ==== Charts ====
import matplotlib
matplotlib.use("Agg")
import matplotlib.pyplot as plt

# ===================== CONFIG =====================
BOT_TOKEN = os.getenv("BOT_TOKEN")
HF_API_KEY = os.getenv("HF_API_KEY")  # HuggingFace API KEY
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ (Railway ‚Üí Variables).")

DB_PATH = "finance.db"
pdfmetrics.registerFont(TTFont('DejaVu', 'DejaVuSans.ttf'))

# ===================== DB =====================
conn = sqlite3.connect(DB_PATH, check_same_thread=False)
cur = conn.cursor()
cur.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    name TEXT,
    currency TEXT DEFAULT '–≥—Ä–Ω',
    created_at TEXT
)
""")
cur.execute("""
CREATE TABLE IF NOT EXISTS transactions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    type TEXT,
    category TEXT,
    subcategory TEXT,
    amount REAL,
    currency TEXT,
    comment TEXT,
    date TEXT,
    created_at TEXT
)
""")
conn.commit()

# ===================== CONSTANTS =====================
MONTHS = {
    1: "–°—ñ—á–µ–Ω—å", 2: "–õ—é—Ç–∏–π", 3: "–ë–µ—Ä–µ–∑–µ–Ω—å", 4: "–ö–≤—ñ—Ç–µ–Ω—å",
    5: "–¢—Ä–∞–≤–µ–Ω—å", 6: "–ß–µ—Ä–≤–µ–Ω—å", 7: "–õ–∏–ø–µ–Ω—å", 8: "–°–µ—Ä–ø–µ–Ω—å",
    9: "–í–µ—Ä–µ—Å–µ–Ω—å", 10: "–ñ–æ–≤—Ç–µ–Ω—å", 11: "–õ–∏—Å—Ç–æ–ø–∞–¥", 12: "–ì—Ä—É–¥–µ–Ω—å"
}
MONTHS_BY_NAME = {v: k for k, v in MONTHS.items()}

TYPES = ["üí∏ –í–∏—Ç—Ä–∞—Ç–∏", "üí∞ –ù–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è", "üìà –Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó"]
CURRENCIES = ["–≥—Ä–Ω", "$"]

CATEGORIES = {
    "üí∏ –í–∏—Ç—Ä–∞—Ç–∏": {
        "–•–∞—Ä—á—É–≤–∞–Ω–Ω—è": ["–ö–∞—Ñ–µ", "–°—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç/—Ä–∏–Ω–æ–∫", "–ì—É–ª—å–∫–∏", "–¢—Ä–∞—Ç–∏ –Ω–∞ —Ä–æ–±–æ—Ç—ñ"],
        "–û–¥—è–≥ —Ç–∞ –≤–∑—É—Ç—Ç—è": ["–°–µ–∫–æ–Ω–¥", "–§—ñ–∑–∏—á–Ω–∏–π –º–∞–≥–∞–∑–∏–Ω", "–û–Ω–ª–∞–π–Ω"],
        "–û—Ä–µ–Ω–¥–∞/–∂–∏—Ç–ª–æ": None,
        "–ì–æ—Å–ø–æ–¥–∞—Ä—á—ñ —Ç–æ–≤–∞—Ä–∏": None,
        "–î–æ—Ä–æ–≥–∞/–ø–æ–¥–æ—Ä–æ–∂—ñ": ["–ú–∞—Ä—à—Ä—É—Ç–∫–∏", "–ê–≤—Ç–æ–±—É—Å–∏/–¥–∞–ª—å–Ω—ñ—Å—Ç—å"],
        "–û–Ω–ª–∞–π–Ω –ø—ñ–¥–ø–∏—Å–∫–∏": ["iCloud", "YouTube", "Prom"],
        "–ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –º–æ–±—ñ–ª—å–Ω–æ–≥–æ": None,
        "–†–æ–∑–≤–∞–≥–∏": None,
        "Vodafone": ["–ß–∞–π/–ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è", "–°—ñ–º-–∫–∞—Ä—Ç–∏"],
    },
    "üìà –Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó": {
        "–ö—Ä–∏–ø—Ç–∞": None,
        "–ó–∞—Ä—è–¥–Ω—ñ –ø—Ä–∏—Å—Ç—Ä–æ—ó": None,
        "Hub station": None,
        "–ê–∫–∞—É–Ω—Ç–∏": None,
        "–ö—É–ø—ñ–≤–ª—è $": None,
    },
    "üí∞ –ù–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è": {
        "–ó–∞—Ä–ø–ª–∞—Ç–∞": None,
        "–ü–µ—Ä–µ–∫–∞–∑": None,
        "–Ü–Ω—à–µ": None,
    },
}

CATEGORY_EMOJI = {
    "–•–∞—Ä—á—É–≤–∞–Ω–Ω—è": "üçî", "–û–¥—è–≥ —Ç–∞ –≤–∑—É—Ç—Ç—è": "üëï", "–û—Ä–µ–Ω–¥–∞/–∂–∏—Ç–ª–æ": "üè†",
    "–ì–æ—Å–ø–æ–¥–∞—Ä—á—ñ —Ç–æ–≤–∞—Ä–∏": "üß¥", "–î–æ—Ä–æ–≥–∞/–ø–æ–¥–æ—Ä–æ–∂—ñ": "üöå", "–û–Ω–ª–∞–π–Ω –ø—ñ–¥–ø–∏—Å–∫–∏": "üì≤",
    "–ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –º–æ–±—ñ–ª—å–Ω–æ–≥–æ": "üì∂", "–†–æ–∑–≤–∞–≥–∏": "üéâ", "Vodafone": "üì°",
    "–ö—Ä–∏–ø—Ç–∞": "ü™ô", "–ó–∞—Ä—è–¥–Ω—ñ –ø—Ä–∏—Å—Ç—Ä–æ—ó": "üîå", "Hub station": "üñ•Ô∏è",
    "–ê–∫–∞—É–Ω—Ç–∏": "üë§", "–ö—É–ø—ñ–≤–ª—è $": "üíµ", "–ó–∞—Ä–ø–ª–∞—Ç–∞": "üíº", "–ü–µ—Ä–µ–∫–∞–∑": "üîÅ",
    "–Ü–Ω—à–µ": "‚ûï",
}

CATEGORY_COLORS = {
    "–•–∞—Ä—á—É–≤–∞–Ω–Ω—è": "#FF9800", "–û–¥—è–≥ —Ç–∞ –≤–∑—É—Ç—Ç—è": "#3F51B5", "–û—Ä–µ–Ω–¥–∞/–∂–∏—Ç–ª–æ": "#009688",
    "–ì–æ—Å–ø–æ–¥–∞—Ä—á—ñ —Ç–æ–≤–∞—Ä–∏": "#795548", "–î–æ—Ä–æ–≥–∞/–ø–æ–¥–æ—Ä–æ–∂—ñ": "#4CAF50",
    "–û–Ω–ª–∞–π–Ω –ø—ñ–¥–ø–∏—Å–∫–∏": "#9C27B0", "–ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –º–æ–±—ñ–ª—å–Ω–æ–≥–æ": "#607D8B",
    "–†–æ–∑–≤–∞–≥–∏": "#673AB7", "Vodafone": "#E91E63", "–ö—Ä–∏–ø—Ç–∞": "#FBC02D",
    "–ó–∞—Ä—è–¥–Ω—ñ –ø—Ä–∏—Å—Ç—Ä–æ—ó": "#8BC34A", "Hub station": "#00BCD4",
    "–ê–∫–∞—É–Ω—Ç–∏": "#CDDC39", "–ö—É–ø—ñ–≤–ª—è $": "#FF5722", "–ó–∞—Ä–ø–ª–∞—Ç–∞": "#2196F3",
    "–ü–µ—Ä–µ–∫–∞–∑": "#00ACC1", "–Ü–Ω—à–µ": "#9E9E9E"
}

TIPS = [
    "–ù–µ –∑–∞–æ—â–∞–¥–∂—É–π —Ç–µ, —â–æ –∑–∞–ª–∏—à–∏–ª–æ—Å—å –ø—ñ—Å–ª—è –≤–∏—Ç—Ä–∞—Ç ‚Äî –≤–∏—Ç—Ä–∞—á–∞–π —Ç–µ, —â–æ –∑–∞–ª–∏—à–∏–ª–æ—Å—å –ø—ñ—Å–ª—è –∑–∞–æ—â–∞–¥–∂–µ–Ω—å. ‚Äî –£–æ—Ä—Ä–µ–Ω –ë–∞—Ñ—Ñ–µ—Ç",
    "–ë—é–¥–∂–µ—Ç ‚Äî —Ü–µ —Ç–µ, —â–æ –∑–º—É—à—É—î –≤–∞—à—ñ –≥—Ä–æ—à—ñ —Ä–æ–±–∏—Ç–∏ —Ç–µ, —â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ. ‚Äî –î–µ–π–≤ –†–µ–º–∑—ñ",
    "–ó–∞–ø–∏—Å—É–π –≤–∏—Ç—Ä–∞—Ç–∏ —â–æ–¥–Ω—è ‚Äî –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∞ –ø–µ—Ä–µ–º–∞–≥–∞—î —ñ–Ω—Ç—É—ó—Ü—ñ—é.",
    "–ü–ª–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É —Å–æ–±—ñ: –≤—ñ–¥–∫–ª–∞–¥–∞–π—Ç–µ 10‚Äì20% –≤—ñ–¥ –∫–æ–∂–Ω–æ–≥–æ –¥–æ—Ö–æ–¥—É.",
    "–°–Ω—ñ–∂–Ω–∏–π –∫–æ–º: –≥–∞—Å—ñ—Ç—å –Ω–∞–π–º–µ–Ω—à—ñ –±–æ—Ä–≥–∏ –ø–µ—Ä—à–∏–º–∏, —â–æ–± –Ω–∞–±–∏—Ä–∞—Ç–∏ —Ç–µ–º–ø.",
    "–î–∏–≤–µ—Ä—Å–∏—Ñ—ñ–∫—É–π —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó ‚Äî –Ω–µ –∫–ª–∞–¥–∏ –≤—Å—ñ —è–π—Ü—è –≤ –æ–¥–∏–Ω –∫–æ—à–∏–∫.",
    "–ö—É–ø—É–π –∞–∫—Ç–∏–≤–∏, –∞ –Ω–µ —Å—Ç–∞—Ç—É—Å. –°—Ç–∞—Ç—É—Å –∑–≥–æ—Ä–∞—î, –∞–∫—Ç–∏–≤–∏ –ø—Ä–∞—Ü—é—é—Ç—å.",
    "–¢–µ, —â–æ –Ω–µ –≤–∏–º—ñ—Ä—é—î—à ‚Äî —Ç–∏–º –Ω–µ –∫–µ—Ä—É—î—à. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ = –∫–æ–Ω—Ç—Ä–æ–ª—å.",
    "–ù–∞–π–∫—Ä–∞—â–∏–π —á–∞—Å –ø–æ—á–∞—Ç–∏ —ñ–Ω–≤–µ—Å—Ç—É–≤–∞—Ç–∏ –±—É–≤ —É—á–æ—Ä–∞. –î—Ä—É–≥–∏–π –Ω–∞–π–∫—Ä–∞—â–∏–π ‚Äî —Å—å–æ–≥–æ–¥–Ω—ñ.",
    "–ì—Ä–æ—à—ñ –ª—é–±–ª—è—Ç—å —Ç–∏—à—É. –ü—Ä–∏–π–º–∞–π —Ä—ñ—à–µ–Ω–Ω—è —Ä–∞—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ, –Ω–µ —ñ–º–ø—É–ª—å—Å–∏–≤–Ω–æ."
]

# ===================== STATES =====================
(
    ASK_NAME, MAIN, AMOUNT, COMMENT,
    STAT_YEAR_SELECT, STAT_MONTH_SELECT, STAT_DAY_SELECT,
    PROFILE_EDIT_NAME, QUIZ_ACTIVE, AI_CHAT
) = range(10)

# ===================== AI =====================
async def ask_ai(prompt):
    url = "https://api-inference.huggingface.co/models/meta-llama/Llama-3.2-3B-Instruct"
    headers = {"Authorization": f"Bearer {HF_API_KEY}"}
    payload = {"inputs": prompt, "parameters": {"max_new_tokens": 200, "temperature": 0.7}}
    try:
        r = requests.post(url, headers=headers, json=payload, timeout=30)
        res = r.json()
        if isinstance(res, list) and "generated_text" in res[0]:
            return res[0]["generated_text"]
        elif "generated_text" in res:
            return res["generated_text"]
        return "‚ö†Ô∏è –í–∏–±–∞—á, –Ω–µ –∑–Ω–∞–π—à–æ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—å."
    except Exception:
        return "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ AI."

async def ai_intro(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "ü§ñ *AI-–ø–æ–º—ñ—á–Ω–∏–∫*\n\n"
        "–ú–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑ —Ñ—ñ–Ω–∞–Ω—Å–∞–º–∏, —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—è–º–∏, —ñ –∑–∞–≥–∞–ª—å–Ω–∏–º–∏ –ø–∏—Ç–∞–Ω–Ω—è–º–∏.\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –ø–∏—Ç–∞–Ω–Ω—è üëá", parse_mode="Markdown"
    )
    return AI_CHAT

async def ai_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    await update.message.reply_text("‚è≥ –î—É–º–∞—é –Ω–∞–¥ –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é‚Ä¶")
    reply = await ask_ai(text)
    await update.message.reply_text(f"ü§ñ {reply}")
    return MAIN

# ===================== MAIN MENU =====================
def main_menu_ikb():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üí∏ –í–∏—Ç—Ä–∞—Ç–∏", callback_data="type:exp"),
         InlineKeyboardButton("üí∞ –ù–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è", callback_data="type:inc")],
        [InlineKeyboardButton("üìà –Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó", callback_data="type:inv"),
         InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats:open")],
        [InlineKeyboardButton("üéÆ –ì—Ä–∞", callback_data="quiz:start"),
         InlineKeyboardButton("üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å", callback_data="profile:open")],
        [InlineKeyboardButton("ü§ñ AI-–ø–æ–º—ñ—á–Ω–∏–∫", callback_data="ai:start")]
    ])

# ===================== CALLBACK ROUTER (—É—Ä–∏–≤–æ–∫ –∑ —Ç–≤–æ—î—ó –ª–æ–≥—ñ–∫–∏) =====================
async def on_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    data = q.data
    await q.answer()

    if data == "ai:start":
        await q.message.reply_text("ü§ñ –ù–∞–ø–∏—à–∏ —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è:", parse_mode="Markdown")
        return AI_CHAT

    # —Ä–µ—à—Ç–∞ —Ç–≤–æ–≥–æ –≤–µ–ª–∏–∫–æ–≥–æ router —Ç—É—Ç –±–µ–∑ –∑–º—ñ–Ω...
    # ...

# ===================== APP =====================
def build_app():
    app = Application.builder().token(BOT_TOKEN).build()
    app.job_queue.run_repeating(refresh_rates_job, interval=60, first=0)

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", cmd_start)],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_name),
                       CallbackQueryHandler(on_cb)],
            MAIN: [CallbackQueryHandler(on_cb)],
            AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_amount),
                     CallbackQueryHandler(on_cb)],
            COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_comment),
                      CallbackQueryHandler(on_cb)],
            STAT_YEAR_SELECT: [CallbackQueryHandler(on_cb)],
            STAT_MONTH_SELECT: [CallbackQueryHandler(on_cb)],
            STAT_DAY_SELECT: [CallbackQueryHandler(on_cb)],
            PROFILE_EDIT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_profile_edit_name),
                                CallbackQueryHandler(on_cb)],
            QUIZ_ACTIVE: [CallbackQueryHandler(on_cb)],
            AI_CHAT: [MessageHandler(filters.TEXT & ~filters.COMMAND, ai_response)]
        },
        fallbacks=[CallbackQueryHandler(on_cb)],
        allow_reentry=True
    )

    app.add_handler(conv)
    return app

def main():
    app = build_app()
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
