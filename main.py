import os
import sqlite3
import calendar
import random
import requests
from collections import defaultdict
from datetime import datetime

from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton, InputFile
)
from telegram.ext import (
    Application, CommandHandler, ConversationHandler,
    MessageHandler, CallbackQueryHandler, ContextTypes, filters
)

# ==== PDF ====
from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle

# ==== Charts ====
import matplotlib
matplotlib.use("Agg")
import matplotlib.pyplot as plt

# ===================== CONFIG =====================
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ (Railway ‚Üí Variables).")

DB_PATH = "finance.db"
pdfmetrics.registerFont(TTFont('DejaVu', 'DejaVuSans.ttf'))

# ===================== DB =====================
conn = sqlite3.connect(DB_PATH, check_same_thread=False)
cur = conn.cursor()
cur.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    name TEXT,
    currency TEXT DEFAULT '–≥—Ä–Ω',
    created_at TEXT
)
""")
cur.execute("""
CREATE TABLE IF NOT EXISTS transactions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    type TEXT,
    category TEXT,
    subcategory TEXT,
    amount REAL,
    currency TEXT,
    comment TEXT,
    date TEXT,
    created_at TEXT
)
""")
conn.commit()

# ===================== CONSTANTS =====================
MONTHS = {
    1: "–°—ñ—á–µ–Ω—å", 2: "–õ—é—Ç–∏–π", 3: "–ë–µ—Ä–µ–∑–µ–Ω—å", 4: "–ö–≤—ñ—Ç–µ–Ω—å",
    5: "–¢—Ä–∞–≤–µ–Ω—å", 6: "–ß–µ—Ä–≤–µ–Ω—å", 7: "–õ–∏–ø–µ–Ω—å", 8: "–°–µ—Ä–ø–µ–Ω—å",
    9: "–í–µ—Ä–µ—Å–µ–Ω—å", 10: "–ñ–æ–≤—Ç–µ–Ω—å", 11: "–õ–∏—Å—Ç–æ–ø–∞–¥", 12: "–ì—Ä—É–¥–µ–Ω—å"
}
MONTHS_BY_NAME = {v: k for k, v in MONTHS.items()}

TYPES = ["üí∏ –í–∏—Ç—Ä–∞—Ç–∏", "üí∞ –ù–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è", "üìà –Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó"]
CURRENCIES = ["–≥—Ä–Ω", "$"]

CATEGORIES = {
    "üí∏ –í–∏—Ç—Ä–∞—Ç–∏": {
        "–•–∞—Ä—á—É–≤–∞–Ω–Ω—è": ["–ö–∞—Ñ–µ", "–°—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç/—Ä–∏–Ω–æ–∫", "–ì—É–ª—å–∫–∏", "–¢—Ä–∞—Ç–∏ –Ω–∞ —Ä–æ–±–æ—Ç—ñ"],
        "–û–¥—è–≥ —Ç–∞ –≤–∑—É—Ç—Ç—è": ["–°–µ–∫–æ–Ω–¥", "–§—ñ–∑–∏—á–Ω–∏–π –º–∞–≥–∞–∑–∏–Ω", "–û–Ω–ª–∞–π–Ω"],
        "–û—Ä–µ–Ω–¥–∞/–∂–∏—Ç–ª–æ": None,
        "–ì–æ—Å–ø–æ–¥–∞—Ä—á—ñ —Ç–æ–≤–∞—Ä–∏": None,
        "–î–æ—Ä–æ–≥–∞/–ø–æ–¥–æ—Ä–æ–∂—ñ": ["–ú–∞—Ä—à—Ä—É—Ç–∫–∏", "–ê–≤—Ç–æ–±—É—Å–∏/–¥–∞–ª—å–Ω—ñ—Å—Ç—å"],
        "–û–Ω–ª–∞–π–Ω –ø—ñ–¥–ø–∏—Å–∫–∏": ["iCloud", "YouTube", "Prom"],
        "–ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –º–æ–±—ñ–ª—å–Ω–æ–≥–æ": None,
        "–†–æ–∑–≤–∞–≥–∏": None,
        "Vodafone": ["–ß–∞–π/–ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è", "–°—ñ–º-–∫–∞—Ä—Ç–∏"],
    },
    "üìà –Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó": {
        "–ö—Ä–∏–ø—Ç–∞": None,
        "–ó–∞—Ä—è–¥–Ω—ñ –ø—Ä–∏—Å—Ç—Ä–æ—ó": None,
        "Hub station": None,
        "–ê–∫–∞—É–Ω—Ç–∏": None,
        "–ö—É–ø—ñ–≤–ª—è $": None,
    },
    "üí∞ –ù–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è": {
        "–ó–∞—Ä–ø–ª–∞—Ç–∞": None,
        "–ü–µ—Ä–µ–∫–∞–∑": None,
        "–Ü–Ω—à–µ": None,
    },
}

# –µ–º–æ–¥–∑—ñ + –∫–æ–ª—å–æ—Ä–∏ –¥–ª—è –≥–æ–ª–æ–≤–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π (pie chart)
CATEGORY_EMOJI = {
    "–•–∞—Ä—á—É–≤–∞–Ω–Ω—è": "üçî",
    "–û–¥—è–≥ —Ç–∞ –≤–∑—É—Ç—Ç—è": "üëï",
    "–û—Ä–µ–Ω–¥–∞/–∂–∏—Ç–ª–æ": "üè†",
    "–ì–æ—Å–ø–æ–¥–∞—Ä—á—ñ —Ç–æ–≤–∞—Ä–∏": "üß¥",
    "–î–æ—Ä–æ–≥–∞/–ø–æ–¥–æ—Ä–æ–∂—ñ": "üöå",
    "–û–Ω–ª–∞–π–Ω –ø—ñ–¥–ø–∏—Å–∫–∏": "üì≤",
    "–ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –º–æ–±—ñ–ª—å–Ω–æ–≥–æ": "üì∂",
    "–†–æ–∑–≤–∞–≥–∏": "üéâ",
    "Vodafone": "üì°",
    "–ö—Ä–∏–ø—Ç–∞": "ü™ô",
    "–ó–∞—Ä—è–¥–Ω—ñ –ø—Ä–∏—Å—Ç—Ä–æ—ó": "üîå",
    "Hub station": "üñ•Ô∏è",
    "–ê–∫–∞—É–Ω—Ç–∏": "üë§",
    "–ö—É–ø—ñ–≤–ª—è $": "üíµ",
    "–ó–∞—Ä–ø–ª–∞—Ç–∞": "üíº",
    "–ü–µ—Ä–µ–∫–∞–∑": "üîÅ",
    "–Ü–Ω—à–µ": "‚ûï",
}
CATEGORY_COLORS = {
    "–•–∞—Ä—á—É–≤–∞–Ω–Ω—è": "#FF9800",
    "–û–¥—è–≥ —Ç–∞ –≤–∑—É—Ç—Ç—è": "#3F51B5",
    "–û—Ä–µ–Ω–¥–∞/–∂–∏—Ç–ª–æ": "#009688",
    "–ì–æ—Å–ø–æ–¥–∞—Ä—á—ñ —Ç–æ–≤–∞—Ä–∏": "#795548",
    "–î–æ—Ä–æ–≥–∞/–ø–æ–¥–æ—Ä–æ–∂—ñ": "#4CAF50",
    "–û–Ω–ª–∞–π–Ω –ø—ñ–¥–ø–∏—Å–∫–∏": "#9C27B0",
    "–ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –º–æ–±—ñ–ª—å–Ω–æ–≥–æ": "#607D8B",
    "–†–æ–∑–≤–∞–≥–∏": "#673AB7",
    "Vodafone": "#E91E63",
    # —ñ–Ω–≤–µ—Å—Ç/–¥–æ—Ö–æ–¥–∏ –Ω–∞ –≤—Å—è–∫:
    "–ö—Ä–∏–ø—Ç–∞": "#FBC02D",
    "–ó–∞—Ä—è–¥–Ω—ñ –ø—Ä–∏—Å—Ç—Ä–æ—ó": "#8BC34A",
    "Hub station": "#00BCD4",
    "–ê–∫–∞—É–Ω—Ç–∏": "#CDDC39",
    "–ö—É–ø—ñ–≤–ª—è $": "#FF5722",
    "–ó–∞—Ä–ø–ª–∞—Ç–∞": "#2196F3",
    "–ü–µ—Ä–µ–∫–∞–∑": "#00ACC1",
    "–Ü–Ω—à–µ": "#9E9E9E",
}

TIPS = [
    "–ù–µ –∑–∞–æ—â–∞–¥–∂—É–π —Ç–µ, —â–æ –∑–∞–ª–∏—à–∏–ª–æ—Å—å –ø—ñ—Å–ª—è –≤–∏—Ç—Ä–∞—Ç ‚Äî –≤–∏—Ç—Ä–∞—á–∞–π —Ç–µ, —â–æ –∑–∞–ª–∏—à–∏–ª–æ—Å—å –ø—ñ—Å–ª—è –∑–∞–æ—â–∞–¥–∂–µ–Ω—å. ‚Äî –£–æ—Ä—Ä–µ–Ω –ë–∞—Ñ—Ñ–µ—Ç",
    "–ë—é–¥–∂–µ—Ç ‚Äî —Ü–µ —Ç–µ, —â–æ –∑–º—É—à—É—î –≤–∞—à—ñ –≥—Ä–æ—à—ñ —Ä–æ–±–∏—Ç–∏ —Ç–µ, —â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ. ‚Äî –î–µ–π–≤ –†–µ–º–∑—ñ",
    "–ó–∞–ø–∏—Å—É–π –≤–∏—Ç—Ä–∞—Ç–∏ —â–æ–¥–Ω—è ‚Äî –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∞ –ø–µ—Ä–µ–º–∞–≥–∞—î —ñ–Ω—Ç—É—ó—Ü—ñ—é.",
    "–ü–ª–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É —Å–æ–±—ñ: –≤—ñ–¥–∫–ª–∞–¥–∞–π—Ç–µ 10‚Äì20% –≤—ñ–¥ –∫–æ–∂–Ω–æ–≥–æ –¥–æ—Ö–æ–¥—É.",
    "–°–Ω—ñ–∂–Ω–∏–π –∫–æ–º: –≥–∞—Å—ñ—Ç—å –Ω–∞–π–º–µ–Ω—à—ñ –±–æ—Ä–≥–∏ –ø–µ—Ä—à–∏–º–∏, —â–æ–± –Ω–∞–±–∏—Ä–∞—Ç–∏ —Ç–µ–º–ø.",
    "–î–∏–≤–µ—Ä—Å–∏—Ñ—ñ–∫—É–π —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó ‚Äî –Ω–µ –∫–ª–∞–¥–∏ –≤—Å—ñ —è–π—Ü—è –≤ –æ–¥–∏–Ω –∫–æ—à–∏–∫.",
    "–í–µ–ª–∏–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –¥–æ—Å—è–≥–∞—î —Ç–æ–π, —Ö—Ç–æ –º–∏—Å–ª–∏—Ç—å –¥–æ–≤–≥–æ—é –¥–∏—Å—Ç–∞–Ω—Ü—ñ—î—é.",
    "–ö—É–ø—É–π –∞–∫—Ç–∏–≤–∏, –∞ –Ω–µ —Å—Ç–∞—Ç—É—Å. –°—Ç–∞—Ç—É—Å –∑–≥–æ—Ä–∞—î, –∞–∫—Ç–∏–≤–∏ –ø—Ä–∞—Ü—é—é—Ç—å.",
    "–¢–µ, —â–æ –Ω–µ –≤–∏–º—ñ—Ä—é—î—à ‚Äî —Ç–∏–º –Ω–µ –∫–µ—Ä—É—î—à. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ = –∫–æ–Ω—Ç—Ä–æ–ª—å.",
    "–ù–∞–π–∫—Ä–∞—â–∏–π —á–∞—Å –ø–æ—á–∞—Ç–∏ —ñ–Ω–≤–µ—Å—Ç—É–≤–∞—Ç–∏ –±—É–≤ —É—á–æ—Ä–∞. –î—Ä—É–≥–∏–π –Ω–∞–π–∫—Ä–∞—â–∏–π ‚Äî —Å—å–æ–≥–æ–¥–Ω—ñ.",
    "–ì—Ä–æ—à—ñ –ª—é–±–ª—è—Ç—å —Ç–∏—à—É. –ü—Ä–∏–π–º–∞–π —Ä—ñ—à–µ–Ω–Ω—è —Ä–∞—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ, –Ω–µ —ñ–º–ø—É–ª—å—Å–∏–≤–Ω–æ."
]

# ===================== QUIZ (20 –ø–∏—Ç–∞–Ω—å, —Ä–∞–Ω–¥–æ–º) =====================
QUIZ_QUESTIONS_BASE = [
    {
        "q": "–Ø–∫–∏–π —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–π –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ—ó –ø–æ–¥—É—à–∫–∏ –±–µ–∑–ø–µ–∫–∏?",
        "opts": ["1 –º—ñ—Å—è—Ü—å –≤–∏—Ç—Ä–∞—Ç", "3‚Äì6 –º—ñ—Å—è—Ü—ñ–≤ –≤–∏—Ç—Ä–∞—Ç", "12 –º—ñ—Å—è—Ü—ñ–≤ –≤–∏—Ç—Ä–∞—Ç", "2 —Ç–∏–∂–Ω—ñ –≤–∏—Ç—Ä–∞—Ç"],
        "ans": 1
    },
    {
        "q": "–©–æ —Ç–∞–∫–µ –ø—Ä–∞–≤–∏–ª–æ ¬´–ü–ª–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É —Å–æ–±—ñ¬ª?",
        "opts": ["–ü–ª–∞—Ç–∏ –±–æ—Ä–≥–∏ –ø–µ—Ä—à –Ω—ñ–∂ –≤–∏—Ç—Ä–∞—á–∞—Ç–∏", "–ö—É–ø–∏ –ø–æ—Ç—Ä—ñ–±–Ω–µ ‚Äî —Ä–µ—à—Ç–∞ –≤ –∑–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è", "–°–ø–µ—Ä—à—É –≤—ñ–¥–∫–ª–∞–¥–∞–π, –∞ –ø–æ—Ç—ñ–º –≤–∏—Ç—Ä–∞—á–∞–π", "–°–ø–µ—Ä—à—É –æ–ø–ª–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫–∏"],
        "ans": 2
    },
    {
        "q": "–Ø–∫–µ —Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø—Ä–æ –¥–∏–≤–µ—Ä—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—é –≤—ñ—Ä–Ω–µ?",
        "opts": ["–Ü–Ω–≤–µ—Å—Ç—É–≤–∞—Ç–∏ –≤ –æ–¥–∏–Ω –∞–∫—Ç–∏–≤ ‚Äî –±–µ–∑–ø–µ—á–Ω—ñ—à–µ", "–†–æ–∑–ø–æ–¥—ñ–ª —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π –∑–º–µ–Ω—à—É—î —Ä–∏–∑–∏–∫", "–î–∏–≤–µ—Ä—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è –∑–Ω–∏–∂—É—î –ø—Ä–∏–±—É—Ç–æ–∫ –¥–æ –Ω—É–ª—è", "–¶–µ –ø—Ä–æ –µ–∫–æ–Ω–æ–º—ñ—é, –∞ –Ω–µ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó"],
        "ans": 1
    },
    {
        "q": "–©–æ —Ç–∞–∫–µ —Å–∫–ª–∞–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç?",
        "opts": ["–í—ñ–¥—Å–æ—Ç–æ–∫ –ª–∏—à–µ –Ω–∞ –ø–æ—á–∞—Ç–∫–æ–≤—É —Å—É–º—É", "–í—ñ–¥—Å–æ—Ç–æ–∫ –Ω–∞ –≤—ñ–¥—Å–æ—Ç–æ–∫", "–ü–ª–∞—Ç–∞ –±–∞–Ω–∫—É –∑–∞ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è", "–†–∞–∑–æ–≤–∞ –∫–æ–º—ñ—Å—ñ—è –±—Ä–æ–∫–µ—Ä–∞"],
        "ans": 1
    },
    {
        "q": "–Ø–∫–∏–π –≤—ñ–¥—Å–æ—Ç–æ–∫ –¥–æ—Ö–æ–¥—É –∫–ª–∞—Å—Ç–∏ –≤ –∑–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è ‚Äî –±–∞–∑–æ–≤–∞ –ø–æ—Ä–∞–¥–∞?",
        "opts": ["1‚Äì5%", "10‚Äì20%", "30‚Äì40%", "50%+"],
        "ans": 1
    },
    {
        "q": "–©–æ —Ä–æ–±–∏—Ç–∏ –ø–µ—Ä–µ–¥ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—è–º–∏?",
        "opts": ["–û—Ñ–æ—Ä–º–∏—Ç–∏ –∫—Ä–µ–¥–∏—Ç–Ω—É –∫–∞—Ä—Ç–∫—É", "–°–∫–ª–∞—Å—Ç–∏ –ø–æ–¥—É—à–∫—É –±–µ–∑–ø–µ–∫–∏", "–ö—É–ø–∏—Ç–∏ –Ω–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å", "–ù—ñ—á–æ–≥–æ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ"],
        "ans": 1
    },
    {
        "q": "–©–æ —Ç–∞–∫–µ –±—é–¥–∂–µ—Ç 50/30/20?",
        "opts": ["50% —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó, 30% –±–æ—Ä–≥–∏, 20% –≤–∏—Ç—Ä–∞—Ç–∏", "50% –ø–æ—Ç—Ä–µ–±–∏, 30% –±–∞–∂–∞–Ω–Ω—è, 20% –∑–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è", "50% –±–∞–∂–∞–Ω–Ω—è, 30% –ø–æ—Ç—Ä–µ–±–∏, 20% –±–æ—Ä–≥–∏", "50% –≤–∏—Ç—Ä–∞—Ç–∏, 50% —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó"],
        "ans": 1
    },
    {
        "q": "–Ø–∫–∏–π —Ä–∏–∑–∏–∫ —É ‚Äú–≥–∞—Ä—è—á–∏—Ö‚Äù –∫—Ä–∏–ø—Ç–æ–ø—Ä–æ—î–∫—Ç–∞—Ö?",
        "opts": ["–ì–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫", "–ù—É–ª—å–æ–≤–∏–π —Ä–∏–∑–∏–∫", "–í–∏—Å–æ–∫–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å —ñ —Ä–∏–∑–∏–∫ –≤—Ç—Ä–∞—Ç", "–î–µ—Ä–∂–∞–≤–Ω—ñ –≥–∞—Ä–∞–Ω—Ç—ñ—ó"],
        "ans": 2
    },
    {
        "q": "–©–æ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—à–µ –ø—Ä–æ—Ç–∏ —ñ–º–ø—É–ª—å—Å–∏–≤–Ω–∏—Ö –ø–æ–∫—É–ø–æ–∫?",
        "opts": ["–ö—É–ø—É–≤–∞—Ç–∏ –≤–Ω–æ—á—ñ", "–ü—Ä–∞–≤–∏–ª–æ 24 –≥–æ–¥–∏–Ω –ø–∞—É–∑–∏", "–û–ø–ª–∞—Ç–∞ –≥–æ—Ç—ñ–≤–∫–æ—é", "–ü–æ–∑–∏–∫–∞ –≤ –¥—Ä—É–≥–∞"],
        "ans": 1
    },
    {
        "q": "–Ø–∫–∏–π —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–∞–π–∫—Ä–∞—â–µ —Ñ—ñ–∫—Å—É—î —Ä–µ–∞–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏ —â–æ–¥–Ω—è?",
        "opts": ["–ü–∞–º‚Äô—è—Ç—å", "–©–æ–º—ñ—Å—è—á–Ω–∏–π –∑–≤—ñ—Ç", "–ó–∞–ø–∏—Å–∏ —É –±–æ—Ç—ñ/–¥–æ–¥–∞—Ç–∫—É", "–†–∞–∑ –Ω–∞ –ø—ñ–≤ —Ä–æ–∫—É"],
        "ans": 2
    },
    {
        "q": "–©–æ –∑–º–µ–Ω—à—É—î –±–æ—Ä–≥–æ–≤–µ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —à–≤–∏–¥—à–µ?",
        "opts": ["–ü–ª–∞—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º–∞–ª–∫–∏", "–°–Ω—ñ–∂–Ω–∏–π –∫–æ–º: –∑ –Ω–∞–π–º–µ–Ω—à–∏—Ö –±–æ—Ä–≥—ñ–≤", "–í–∑—è—Ç–∏ –Ω–æ–≤–∏–π –∫—Ä–µ–¥–∏—Ç", "–Ü–≥–Ω–æ—Ä—É–≤–∞—Ç–∏ –±–æ—Ä–≥–∏"],
        "ans": 1
    },
    {
        "q": "–©–æ –æ–∑–Ω–∞—á–∞—î ¬´–∂–∏—Ç–∏ –Ω–∏–∂—á–µ —Å–≤–æ—ó—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π¬ª?",
        "opts": ["–í–∏—Ç—Ä–∞—á–∞—Ç–∏ –±—ñ–ª—å—à–µ –Ω—ñ–∂ –∑–∞—Ä–æ–±–ª—è—î—à", "–ó–∞–≤–∂–¥–∏ –∫—É–ø—É–≤–∞—Ç–∏ –Ω–∞–π–¥–µ—à–µ–≤—à–µ", "–í–∏—Ç—Ä–∞—á–∞—Ç–∏ –º–µ–Ω—à–µ –¥–æ—Ö–æ–¥—É —Ç–∞ —ñ–Ω–≤–µ—Å—Ç—É–≤–∞—Ç–∏ —Ä—ñ–∑–Ω–∏—Ü—é", "–ñ–∏—Ç–∏ –±–µ–∑ –∫–æ–º—Ñ–æ—Ä—Ç—É"],
        "ans": 2
    },
    {
        "q": "–Ø–∫–∏–π –≥–æ–ª–æ–≤–Ω–∏–π —Ä–∏–∑–∏–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≥—Ä–æ—à–µ–π –ª–∏—à–µ —É –≥–æ—Ç—ñ–≤—Ü—ñ?",
        "opts": ["–ó—Ä—É—á–Ω—ñ—Å—Ç—å", "–Ü–Ω—Ñ–ª—è—Ü—ñ—è –∑‚Äô—ó–¥–∞—î –∫—É–ø—ñ–≤–µ–ª—å–Ω—É —Å–ø—Ä–æ–º–æ–∂–Ω—ñ—Å—Ç—å", "–í–∏—Å–æ–∫–∏–π –≤—ñ–¥—Å–æ—Ç–æ–∫", "–î–µ—Ä–∂–∞–≤–Ω—ñ –≥–∞—Ä–∞–Ω—Ç—ñ—ó"],
        "ans": 1
    },
    {
        "q": "–©–æ –≤–∞–∂–ª–∏–≤—ñ—à–µ –ø—Ä–∏ –¥–æ–≤–≥–æ—Å—Ç—Ä–æ–∫–æ–≤–æ–º—É —ñ–Ω–≤–µ—Å—Ç—É–≤–∞–Ω–Ω—ñ?",
        "opts": ["–ß–∞—Å –Ω–∞ —Ä–∏–Ω–∫—É", "–¢–∞–π–º—ñ–Ω–≥ —Ä–∏–Ω–∫—É", "–Ü–¥–µ–∞–ª—å–Ω–∞ —Ç–æ—á–∫–∞ –≤—Ö–æ–¥—É", "–©–æ–¥–µ–Ω–Ω–∞ –∫—É–ø—ñ–≤–ª—è-–ø—Ä–æ–¥–∞–∂"],
        "ans": 0
    },
    {
        "q": "–©–æ –∑ —Ü—å–æ–≥–æ ‚Äî –∞–∫—Ç–∏–≤?",
        "opts": ["–ê–≤—Ç–æ–º–æ–±—ñ–ª—å, —â–æ —â–æ–º—ñ—Å—è—Ü—è –ø–æ—Ç—Ä–µ–±—É—î –≤–∏—Ç—Ä–∞—Ç", "–ö–∞—Ñ–µ-–∫–∞–≤–∞ –∫–æ–∂–Ω–æ–≥–æ –¥–Ω—è", "–ê–∫—Ü—ñ—ó/—Ñ–æ–Ω–¥–∏, —â–æ –≥–µ–Ω–µ—Ä—É—é—Ç—å –¥–æ—Ö—ñ–¥", "–ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–µ—Ä—ñ–∞–ª–∏"],
        "ans": 2
    },
    {
        "q": "–û–ø—Ç–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∞–ª—é—Ç —É –∑–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è—Ö?",
        "opts": ["–õ–∏—à–µ –æ–¥–Ω–∞", "2‚Äì3 –≤–∞–ª—é—Ç–∏", "10 –≤–∞–ª—é—Ç", "–ù–µ –º–∞—î –∑–Ω–∞—á–µ–Ω–Ω—è"],
        "ans": 1
    },
    {
        "q": "–©–æ —Ç–∞–∫–µ ¬´—Ä–µ–∑–µ—Ä–≤–∏ –Ω–∞ –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏¬ª?",
        "opts": ["–í–∏—Ç—Ä–∞—Ç–∏ –Ω–∞ —Ä–æ–∑–≤–∞–≥–∏", "–ì—Ä–æ—à—ñ –Ω–∞ –±–∞–∂–∞–Ω–Ω—è", "–§–æ–Ω–¥ –¥–ª—è –ø–æ–ª–æ–º–æ–∫/–ª—ñ–∫—É–≤–∞–Ω–Ω—è/—à—Ç—Ä–∞—Ñ—ñ–≤", "–ü–æ–¥–∞—Ç–∫–æ–≤–∞ –ø—ñ–ª—å–≥–∞"],
        "ans": 2
    },
    {
        "q": "–ß–æ–º—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ –ø–µ—Ä–µ–∫–∞–∑–∏ –≤ –∑–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è ‚Äî —Ü–µ –¥–æ–±—Ä–µ?",
        "opts": ["–ë–æ –Ω–µ–∑—Ä—É—á–Ω–æ", "–ó–º–µ–Ω—à—É—î –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω—É", "–ó–Ω—ñ–º–∞—î –∑—É—Å–∏–ª–ª—è: —Å—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å —ñ –∑–≤–∏—á–∫–∞", "–ù–µ –º–∞—î —Å–µ–Ω—Å—É"],
        "ans": 2
    },
    {
        "q": "–ù–∞–≤—ñ—â–æ –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫–∏?",
        "opts": ["–©–æ–± –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Å–µ—Ä—ñ–∞–ª", "–©–æ–± –Ω–µ –ø–µ—Ä–µ–ø–ª–∞—á—É–≤–∞—Ç–∏ —â–æ–º—ñ—Å—è—Ü—è –Ω–µ–ø–æ–º—ñ—Ç–Ω–æ", "–©–æ–± –∑–∞—Ä–æ–±–ª—è—Ç–∏ –Ω–∞ –ø—ñ–¥–ø–∏—Å–∫–∞—Ö", "–©–æ–± –ø–ª–∞—Ç–∏—Ç–∏ —à—Ç—Ä–∞—Ñ–∏"],
        "ans": 1
    },
    {
        "q": "–ö–æ–ª–∏ –ø–æ—á–∏–Ω–∞—Ç–∏ —ñ–Ω–≤–µ—Å—Ç—É–≤–∞—Ç–∏?",
        "opts": ["–ö–æ–ª–∏ –±—É–¥–µ –±–∞–≥–∞—Ç–æ –≥—Ä–æ—à–µ–π", "–û–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–¥—É—à–∫–∏", "–ù—ñ–∫–æ–ª–∏", "–õ–∏—à–µ –≤ –∫—Ä–∏–∑—É"],
        "ans": 1
    },
]

# ===================== STATES =====================
(
    ASK_NAME,  # –æ–Ω–±–æ—Ä–¥–∏–Ω–≥: —ñ–º‚Äô—è
    MAIN,      # –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é/—Å—Ç–∞–Ω callback
    AMOUNT,    # –≤–≤—ñ–¥ —Å—É–º–∏
    COMMENT,   # –≤–≤—ñ–¥ –∫–æ–º–µ–Ω—Ç–∞—Ä—è
    STAT_YEAR_SELECT,
    STAT_MONTH_SELECT,
    STAT_DAY_SELECT,
    PROFILE_EDIT_NAME,
    QUIZ_ACTIVE,  # –≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞ ‚Äî –∫–ª—ñ–∫–∏ A/B/C/D
) = range(9)

# ===================== RATES (NBU + CoinGecko) =====================
async def refresh_rates_job(context: ContextTypes.DEFAULT_TYPE):
    # NBU
    try:
        r = requests.get("https://bank.gov.ua/NBUStatService/v1/statdirectory/exchange?json", timeout=10)
        data = r.json()
        usd = next((x for x in data if str(x.get("r030")) == "840"), None)
        eur = next((x for x in data if str(x.get("r030")) == "978"), None)
        usd_uah = float(usd["rate"]) if usd else None
        eur_uah = float(eur["rate"]) if eur else None
    except Exception:
        usd_uah = eur_uah = None

    # CoinGecko
    try:
        c = requests.get(
            "https://api.coingecko.com/api/v3/simple/price",
            params={"ids": "bitcoin,ethereum", "vs_currencies": "usd"},
            timeout=10
        ).json()
        btc_usd = float(c.get("bitcoin", {}).get("usd", 0) or 0)
        eth_usd = float(c.get("ethereum", {}).get("usd", 0) or 0)
    except Exception:
        btc_usd = eth_usd = None

    rates = context.application.bot_data.get("rates", {})
    if usd_uah: rates["usd_uah"] = usd_uah
    if eur_uah: rates["eur_uah"] = eur_uah
    if btc_usd: rates["btc_usd"] = btc_usd
    if eth_usd: rates["eth_usd"] = eth_usd
    context.application.bot_data["rates"] = rates
    context.application.bot_data["rates_updated"] = datetime.utcnow().isoformat()

def fmtn(v: float) -> str:
    return f"{v:,.2f}".replace(",", " ").replace(".", ",")

def fmtd(v: float) -> str:
    return f"{v:,.0f}".replace(",", " ")

def rates_block(bot_data: dict) -> str:
    rates = bot_data.get("rates", {})
    usd = rates.get("usd_uah")
    eur = rates.get("eur_uah")
    btc = rates.get("btc_usd")
    eth = rates.get("eth_usd")
    if not (usd and eur and btc and eth):
        return "üì° –ö–æ—Ç–∏—Ä—É–≤–∞–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ –∑–∞—Ä–∞–∑. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ."
    btc_uah = btc * usd
    eth_uah = eth * usd
    return (
        "üìà –ö–û–¢–ò–†–£–í–ê–ù–ù–Ø (—Ä–µ–∞–ª—å–Ω–∏–π —á–∞—Å)\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"üíµ –î–æ–ª–∞—Ä –°–®–ê: 1 USD = {fmtn(usd)} –≥—Ä–Ω\n"
        f"üí∂ –Ñ–≤—Ä–æ: 1 EUR = {fmtn(eur)} –≥—Ä–Ω\n"
        f"‚Çø –ë—ñ—Ç–∫–æ—ó–Ω: ${fmtd(btc)} ‚âà {fmtn(btc_uah)} –≥—Ä–Ω\n"
        f"Œû –ï—Ñ—ñ—Ä: ${fmtd(eth)} ‚âà {fmtn(eth_uah)} –≥—Ä–Ω"
    )

# ===================== HELPERS (DB) =====================
def get_user(user_id: int):
    cur.execute("SELECT user_id, name, currency, created_at FROM users WHERE user_id=?", (user_id,))
    return cur.fetchone()

def create_or_update_user(user_id: int, name: str, currency: str):
    cur.execute("""
        INSERT INTO users (user_id, name, currency, created_at)
        VALUES (?, ?, ?, ?)
        ON CONFLICT(user_id) DO UPDATE SET name=excluded.name, currency=excluded.currency
    """, (user_id, name, currency, datetime.utcnow().isoformat()))
    conn.commit()

def save_tx(user_id, ttype, cat, sub, amount, currency, comment, date_str):
    cur.execute("""
        INSERT INTO transactions (user_id, type, category, subcategory, amount, currency, comment, date, created_at)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
    """, (user_id, ttype, cat, sub, amount, currency, comment, date_str, datetime.utcnow().isoformat()))
    conn.commit()

def fetch_day(user_id, y, m, d):
    ds = f"{y:04d}-{m:02d}-{d:02d}"
    cur.execute("""SELECT type, category, subcategory, amount, currency, comment
                   FROM transactions WHERE user_id=? AND date=?""", (user_id, ds))
    return cur.fetchall(), ds

def fetch_month(user_id, y, m):
    cur.execute("""SELECT type, category, subcategory, amount, currency, comment
                   FROM transactions
                   WHERE user_id=? AND strftime('%Y', date)=? AND strftime('%m', date)=?""",
                (user_id, str(y), f"{m:02d}"))
    return cur.fetchall()

# ===================== HELPERS (TEXT/PDF/CHARTS) =====================
def build_stats_text(rows, title):
    if not rows:
        return f"{title}\nüì≠ –ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤."
    sums = {"üí∏ –í–∏—Ç—Ä–∞—Ç–∏": 0.0, "üí∞ –ù–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è": 0.0, "üìà –Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó": 0.0}
    lines = []
    for t, c, s, a, curx, com in rows:
        a = float(a or 0)
        if t not in sums:
            sums[t] = 0.0
        sums[t] += a
        lines.append(f"‚Ä¢ {t} | {CATEGORY_EMOJI.get(c, '')} {c}/{s or '-'} ‚Äî {a:.2f} {curx} ({com or '-'})")
    total = "\n".join([f"{k}: {v:.2f}" for k, v in sums.items()])
    tip = random.choice(TIPS)
    return f"{title}\n\n" + "\n".join(lines) + f"\n\n–ü—ñ–¥—Å—É–º–æ–∫:\n{total}\n\nüí° {tip}"

def make_pdf(rows, title, filename):
    doc = SimpleDocTemplate(filename, pagesize=A4)
    styles = getSampleStyleSheet()
    if "Ukr" not in styles:
        styles.add(ParagraphStyle(name="Ukr", fontName="DejaVu", fontSize=12, leading=15))
    elements = [Paragraph(title, styles["Ukr"])]
    data = [["–¢–∏–ø", "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è", "–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è", "–°—É–º–∞", "–í–∞–ª—é—Ç–∞", "–ö–æ–º–µ–Ω—Ç–∞—Ä"]]
    totals = defaultdict(float)
    for t, c, s, a, curx, com in rows:
        a = float(a or 0)
        totals[t] += a
        data.append([t, f"{CATEGORY_EMOJI.get(c,'')} {c}", s or "-", f"{a:.2f}", curx, com or "-"])
    data.append(["", "", "", "", "", ""])
    for k in ["üí∏ –í–∏—Ç—Ä–∞—Ç–∏", "üí∞ –ù–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è", "üìà –Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó"]:
        data.append([k, "", "", f"{totals[k]:.2f}", "", ""])
    table = Table(data, repeatRows=1, hAlign='LEFT')
    table.setStyle(TableStyle([
        ('FONTNAME', (0, 0), (-1, -1), 'DejaVu'),
        ('FONTSIZE', (0, 0), (-1, -1), 9),
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('GRID', (0, 0), (-1, -1), 0.5, colors.black),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
    ]))
    elements.append(table)
    doc.build(elements)

def make_pie_expenses(rows, title, path_png):
    sums_by_cat = defaultdict(float)
    for t, c, s, a, curx, com in rows:
        if t == "üí∏ –í–∏—Ç—Ä–∞—Ç–∏":
            sums_by_cat[c] += float(a or 0)
    if not sums_by_cat:
        return False
    labels = [f"{CATEGORY_EMOJI.get(k,'')} {k}" for k in sums_by_cat.keys()]
    values = list(sums_by_cat.values())
    colors_list = [CATEGORY_COLORS.get(k, "#999999") for k in sums_by_cat.keys()]
    plt.figure()
    plt.pie(values, labels=labels, autopct="%1.1f%%", colors=colors_list)
    plt.title(title)
    plt.tight_layout()
    plt.savefig(path_png)
    plt.close()
    return True

def profile_summary(user_id):
    cur.execute("SELECT name, currency, created_at FROM users WHERE user_id=?", (user_id,))
    u = cur.fetchone()
    if not u:
        return None, None
    name, currency, created = u
    cur.execute("""SELECT COUNT(*),
                          SUM(CASE WHEN type='üí∏ –í–∏—Ç—Ä–∞—Ç–∏' THEN amount ELSE 0 END),
                          SUM(CASE WHEN type='üí∞ –ù–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è' THEN amount ELSE 0 END)
                   FROM transactions WHERE user_id=?""", (user_id,))
    cnt, exp_sum, inc_sum = cur.fetchone()
    exp_sum = exp_sum or 0
    inc_sum = inc_sum or 0
    text = (
        "üìá –û–°–û–ë–ò–°–¢–ò–ô –ö–ê–ë–Ü–ù–ï–¢\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"üë§ –Ü–º‚Äô—è: {name}\n"
        f"üí± –í–∞–ª—é—Ç–∞: {currency}\n"
        f"üìÖ –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ: {(created or '')[:10]}\n"
        f"üßæ –ó–∞–ø–∏—Å—ñ–≤: {cnt}\n"
        f"üí∏ –£—Å—å–æ–≥–æ –≤–∏—Ç—Ä–∞—Ç: {exp_sum:.2f} {currency}\n"
        f"üí∞ –£—Å—å–æ–≥–æ –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω—å: {inc_sum:.2f} {currency}\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"üí° {random.choice(TIPS)}"
    )
    return text, currency

# ===================== UI (Inline Keyboards) =====================
def ikb(rows):
    return InlineKeyboardMarkup([[InlineKeyboardButton(t, callback_data=d) for (t, d) in row] for row in rows])

def main_menu_ikb():
    return ikb([
        [("üí∏ –í–∏—Ç—Ä–∞—Ç–∏", "type:exp"), ("üí∞ –ù–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è", "type:inc")],
        [("üìà –Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó", "type:inv"), ("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "stats:open")],
        [("üéÆ –ì—Ä–∞", "quiz:start"), ("üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å", "profile:open")]
    ])

def categories_ikb(tname):
    cats = list(CATEGORIES[tname].keys())
    rows, row = [], []
    for i, c in enumerate(cats):
        title = f"{CATEGORY_EMOJI.get(c,'')} {c}"
        row.append((title, f"cat:{i}"))
        if len(row) == 2:
            rows.append(row); row = []
    if row: rows.append(row)
    rows.append([("‚Ü©Ô∏è –ù–∞–∑–∞–¥", "back:main"), ("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", "main:open")])
    return ikb(rows)

def subcategories_ikb(tname, cat_name):
    subs = CATEGORIES[tname][cat_name]
    rows = []
    if subs:
        row = []
        for i, s in enumerate(subs):
            row.append((s, f"sub:{i}"))
            if len(row) == 2:
                rows.append(row); row = []
        if row: rows.append(row)
    rows.append([("(–±–µ–∑ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó)", "sub:none")])
    rows.append([("‚Ü©Ô∏è –ù–∞–∑–∞–¥", "back:cats"), ("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", "main:open")])
    return ikb(rows)

def stat_mode_ikb():
    return ikb([
        [("üìÖ –ó–∞ –¥–µ–Ω—å", "stats:mode:day"), ("üìÖ –ó–∞ –º—ñ—Å—è—Ü—å", "stats:mode:mon")],
        [("‚Ü©Ô∏è –ù–∞–∑–∞–¥", "back:main"), ("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", "main:open")]
    ])

def years_ikb():
    y = datetime.now().year
    return ikb([
        [(str(y), f"stats:year:{y}"), (str(y-1), f"stats:year:{y-1}")],
        [("‚Ü©Ô∏è –ù–∞–∑–∞–¥", "back:statsmode"), ("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", "main:open")]
    ])

def months_ikb():
    rows, row = [], []
    for m in range(1, 13):
        row.append((MONTHS[m], f"stats:month:{m:02d}"))
        if len(row) == 3:
            rows.append(row); row = []
    if row: rows.append(row)
    rows.append([("‚Ü©Ô∏è –ù–∞–∑–∞–¥", "back:year"), ("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", "main:open")])
    return ikb(rows)

def days_ikb(year: int, month: int):
    nd = calendar.monthrange(year, month)[1]
    rows, row = [], []
    for d in range(1, nd+1):
        row.append((str(d), f"stats:day:{d:02d}"))
        if len(row) == 7:
            rows.append(row); row = []
    if row: rows.append(row)
    rows.append([("‚Ü©Ô∏è –ù–∞–∑–∞–¥", "back:month"), ("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", "main:open")])
    return ikb(rows)

def stats_actions_ikb():
    return ikb([
        [("üìÑ PDF", "stats:pdf"), ("ü•ß –î—ñ–∞–≥—Ä–∞–º–∞", "stats:pie")],
        [("‚Ü©Ô∏è –ù–∞–∑–∞–¥", "back:statselect"), ("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", "main:open")]
    ])

def profile_menu_ikb():
    return ikb([
        [("‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ —ñ–º‚Äô—è", "profile:editname"), ("üí± –ó–º—ñ–Ω–∏—Ç–∏ –≤–∞–ª—é—Ç—É", "profile:editcur")],
        [("üìú –£–≤–µ—Å—å —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏–π PDF", "profile:allpdf")],
        [("‚Ü©Ô∏è –ù–∞–∑–∞–¥", "back:main"), ("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", "main:open")]
    ])

def currency_pick_ikb(prefix: str):
    return ikb([
        [("–≥—Ä–Ω", f"{prefix}:setcur:–≥—Ä–Ω"), ("$", f"{prefix}:setcur:$")],
        [("‚Ü©Ô∏è –ù–∞–∑–∞–¥", "back:main"), ("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", "main:open")]
    ])

def quiz_answer_ikb(q_idx: int):
    # A/B/C/D –∑ callback
    return ikb([
        [("A", f"quiz:ans:{q_idx}:0"), ("B", f"quiz:ans:{q_idx}:1")],
        [("C", f"quiz:ans:{q_idx}:2"), ("D", f"quiz:ans:{q_idx}:3")],
        [("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", "main:open")]
    ])

# ===================== INTRO =====================
INTRO_TEXT = (
    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    "ü§ñ –§–Ü–ù–ê–ù–°–û–í–ò–ô –ë–û–¢ ‚Äî –¢–í–Ü–ô –û–°–û–ë–ò–°–¢–ò–ô –ö–ê–ë–Ü–ù–ï–¢\n"
    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    "–©–æ –≤–º—ñ—é:\n"
    "‚Ä¢ –ó–∞–ø–∏—Å—É–≤–∞—Ç–∏ üí∏ –≤–∏—Ç—Ä–∞—Ç–∏, üí∞ –¥–æ—Ö–æ–¥–∏, üìà —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó\n"
    "‚Ä¢ –ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –¥–µ–Ω—å –∞–±–æ –º—ñ—Å—è—Ü—å (–∑ –¥–µ—Ç–∞–ª—è–º–∏)\n"
    "‚Ä¢ –ë—É–¥—É–≤–∞—Ç–∏ ü•ß –¥—ñ–∞–≥—Ä–∞–º–∏ –≤–∏—Ç—Ä–∞—Ç —Ç–∞ –≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ üìÑ PDF-–∑–≤—ñ—Ç–∏\n"
    "‚Ä¢ –ó–±–µ—Ä—ñ–≥–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π —ñ –ø—Ä–æ—Ñ—ñ–ª—å (—ñ–º‚Äô—è, –≤–∞–ª—é—Ç–∞)\n"
    "‚Ä¢ –ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω—ñ –∫—É—Ä—Å–∏ –≤–∞–ª—é—Ç/–∫—Ä–∏–ø—Ç–∏ (–ù–ë–£ + CoinGecko)\n\n"
    "–ü–æ—á–∏–Ω–∞–π —ñ–∑ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É –∞–±–æ –≤—ñ–¥–∫—Ä–∏–π ¬´üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞¬ª. –ì–æ—Ç–æ–≤–∏–π? üôÇ\n"
)

# ===================== MAIN MENU SENDER =====================
async def send_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, greeting: str | None = None):
    text = (greeting or "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é") + "\n\n" + rates_block(context.application.bot_data)
    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=main_menu_ikb())
    else:
        await update.message.reply_text(text, reply_markup=main_menu_ikb())

# ===================== START / ONBOARD =====================
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    u = get_user(update.effective_user.id)
    if not u:
        await update.message.reply_text("üëã –ü—Ä–∏–≤—ñ—Ç! –Ø–∫ –¥–æ —Ç–µ–±–µ –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—å?")
        return ASK_NAME
    await send_main_menu(update, context, f"üëã –ü—Ä–∏–≤—ñ—Ç, {u[1]}!\n\n{INTRO_TEXT}")
    return MAIN

async def save_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = (update.message.text or "").strip()
    if not name:
        await update.message.reply_text("–í–≤–µ–¥–∏ —ñ–º'—è üôÇ")
        return ASK_NAME
    context.user_data["pending_name"] = name
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç—É:", reply_markup=currency_pick_ikb("onb"))
    return MAIN  # —á–µ–∫–∞—î–º–æ callback onb:setcur:*

# ===================== CALLBACK ROUTER =====================
async def on_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    data = q.data
    await q.answer()
    uid = update.effective_user.id

    # -------- –ì–û–õ–û–í–ù–ï –ú–ï–ù–Æ --------
    if data == "main:open":
        await send_main_menu(update, context, "üè† –ü–æ–≤–µ—Ä–Ω—É–≤—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
        return MAIN

    # -------- –û–ù–ë–û–†–î–ò–ù–ì: –≤–∞–ª—é—Ç–∞ --------
    if data.startswith("onb:setcur:"):
        curx = data.split(":", 2)[2]
        name = context.user_data.get("pending_name", "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á")
        create_or_update_user(uid, name, curx)
        await send_main_menu(update, context, f"‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å —Å—Ç–≤–æ—Ä–µ–Ω–æ!\n\n{INTRO_TEXT}")
        context.user_data.pop("pending_name", None)
        return MAIN

    # -------- –í–ò–ë–Ü–† –¢–ò–ü–£ (EXP/INC/INV) --------
    if data.startswith("type:"):
        code = data.split(":")[1]
        tname = {"exp": "üí∏ –í–∏—Ç—Ä–∞—Ç–∏", "inc": "üí∞ –ù–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è", "inv": "üìà –Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó"}[code]
        context.user_data["tname"] = tname
        context.user_data["cat_list"] = list(CATEGORIES[tname].keys())
        await q.edit_message_text(f"–û–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é ({tname}):", reply_markup=categories_ikb(tname))
        return MAIN

    # -------- –ö–ê–¢–ï–ì–û–†–Ü–á --------
    if data == "back:main":
        await send_main_menu(update, context, "‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É–≤—Å—è –Ω–∞ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
        return MAIN

    if data.startswith("cat:"):
        idx = int(data.split(":")[1])
        cats = context.user_data.get("cat_list", [])
        if idx < 0 or idx >= len(cats):
            await q.edit_message_text("–û–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=categories_ikb(context.user_data.get("tname", TYPES[0])))
            return MAIN
        cat_name = cats[idx]
        context.user_data["cat_name"] = cat_name
        tname = context.user_data["tname"]
        await q.edit_message_text(f"–û–±–µ—Ä–∏ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é ({CATEGORY_EMOJI.get(cat_name,'')} {cat_name}):", reply_markup=subcategories_ikb(tname, cat_name))
        return MAIN

    # -------- –ü–Ü–î–ö–ê–¢–ï–ì–û–†–Ü–á --------
    if data == "back:cats":
        tname = context.user_data.get("tname", TYPES[0])
        await q.edit_message_text(f"–û–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é ({tname}):", reply_markup=categories_ikb(tname))
        return MAIN

    if data.startswith("sub:"):
        val = data.split(":")[1]
        tname = context.user_data.get("tname", TYPES[0])
        cat_name = context.user_data.get("cat_name")
        if val == "none":
            context.user_data["sub_name"] = None
        else:
            subs = CATEGORIES[tname][cat_name] or []
            idx = int(val)
            if idx < 0 or idx >= len(subs):
                await q.edit_message_text("–û–±–µ—Ä–∏ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=subcategories_ikb(tname, cat_name))
                return MAIN
            context.user_data["sub_name"] = subs[idx]
        # –ø—Ä–æ—Å–∏–º–æ —Å—É–º—É
        await q.edit_message_text(
            "–í–≤–µ–¥–∏ —Å—É–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 123.45):",
            reply_markup=ikb([[("‚Ü©Ô∏è –ù–∞–∑–∞–¥", "back:cats"), ("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", "main:open")]])
        )
        return AMOUNT

    # -------- –°–¢–ê–¢–ò–°–¢–ò–ö–ê --------
    if data == "stats:open":
        await q.edit_message_text("–û–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º:", reply_markup=stat_mode_ikb())
        return MAIN

    if data == "back:statsmode":
        await q.edit_message_text("–û–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º:", reply_markup=stat_mode_ikb())
        return MAIN

    if data.startswith("stats:mode:"):
        mode = data.split(":")[2]  # day | mon
        context.user_data["stat_mode"] = mode
        await q.edit_message_text("–û–±–µ—Ä—ñ—Ç—å —Ä—ñ–∫:", reply_markup=years_ikb())
        return STAT_YEAR_SELECT

    if data == "back:year":
        await q.edit_message_text("–û–±–µ—Ä—ñ—Ç—å —Ä—ñ–∫:", reply_markup=years_ikb())
        return STAT_YEAR_SELECT

    if data.startswith("stats:year:"):
        y = int(data.split(":")[2])
        context.user_data["year"] = y
        await q.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—è—Ü—å:", reply_markup=months_ikb())
        return STAT_MONTH_SELECT

    if data == "back:month":
        await q.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—è—Ü—å:", reply_markup=months_ikb())
        return STAT_MONTH_SELECT

    if data.startswith("stats:month:"):
        m = int(data.split(":")[2])
        context.user_data["month"] = m
        if context.user_data.get("stat_mode") == "day":
            y = context.user_data["year"]
            await q.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å:", reply_markup=days_ikb(y, m))
            return STAT_DAY_SELECT
        # –∑–∞ –º—ñ—Å—è—Ü—å
        rows = fetch_month(uid, context.user_data["year"], m)
        title = f"üìÜ {MONTHS[m]} {context.user_data['year']}"
        context.user_data["last_report"] = ("month", rows, title)
        await q.edit_message_text(build_stats_text(rows, title), reply_markup=stats_actions_ikb())
        return MAIN

    if data == "back:statselect":
        mode = context.user_data.get("stat_mode")
        if mode == "day":
            y = context.user_data.get("year", datetime.now().year)
            m = context.user_data.get("month", datetime.now().month)
            await q.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å:", reply_markup=days_ikb(y, m))
            return STAT_DAY_SELECT
        else:
            await q.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—è—Ü—å:", reply_markup=months_ikb())
            return STAT_MONTH_SELECT

    if data.startswith("stats:day:"):
        d = int(data.split(":")[2])
        y, m = context.user_data["year"], context.user_data["month"]
        rows, _ = fetch_day(uid, y, m, d)
        title = f"üìÖ {d} {MONTHS[m]} {y}"
        context.user_data["last_report"] = ("day", rows, title)
        await q.edit_message_text(build_stats_text(rows, title), reply_markup=stats_actions_ikb())
        return MAIN

    if data == "stats:pdf":
        payload = context.user_data.get("last_report")
        if not payload:
            await q.answer("–°–ø–æ—á–∞—Ç–∫—É —Å—Ñ–æ—Ä–º—É–π—Ç–µ –∑–≤—ñ—Ç.", show_alert=True)
            return MAIN
        _, rows, title = payload
        fname = "report.pdf"
        make_pdf(rows, title, fname)
        with open(fname, "rb") as f:
            await q.message.reply_document(document=InputFile(f, filename=fname), caption=title)
        await q.message.reply_text("–©–æ –¥–∞–ª—ñ?", reply_markup=stats_actions_ikb())
        return MAIN

    if data == "stats:pie":
        payload = context.user_data.get("last_report")
        if not payload:
            await q.answer("–°–ø–æ—á–∞—Ç–∫—É —Å—Ñ–æ—Ä–º—É–π—Ç–µ –∑–≤—ñ—Ç.", show_alert=True)
            return MAIN
        _, rows, title = payload
        img = "pie.png"
        ok = make_pie_expenses(rows, f"–†–æ–∑–ø–æ–¥—ñ–ª –≤–∏—Ç—Ä–∞—Ç ‚Äî {title}", img)
        if not ok:
            await q.answer("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø–æ –≤–∏—Ç—Ä–∞—Ç–∞—Ö –¥–ª—è –¥—ñ–∞–≥—Ä–∞–º–∏.", show_alert=True)
            return MAIN
        with open(img, "rb") as f:
            await q.message.reply_photo(photo=f, caption=f"–†–æ–∑–ø–æ–¥—ñ–ª –≤–∏—Ç—Ä–∞—Ç ‚Äî {title}")
        await q.message.reply_text("–©–æ –¥–∞–ª—ñ?", reply_markup=stats_actions_ikb())
        return MAIN

    # -------- –ü–†–û–§–Ü–õ–¨ --------
    if data == "profile:open":
        txt, _ = profile_summary(uid)
        await q.edit_message_text(txt or "–ü—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", reply_markup=profile_menu_ikb())
        return MAIN

    if data == "profile:editname":
        await q.edit_message_text("–í–≤–µ–¥–∏ –Ω–æ–≤–µ —ñ–º‚Äô—è:", reply_markup=ikb([[("‚Ü©Ô∏è –ù–∞–∑–∞–¥", "back:main"), ("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", "main:open")]]))
        return PROFILE_EDIT_NAME

    if data == "profile:editcur":
        await q.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç—É:", reply_markup=currency_pick_ikb("prof"))
        return MAIN

    if data.startswith("prof:setcur:"):
        curx = data.split(":", 2)[2]
        cur.execute("UPDATE users SET currency=? WHERE user_id=?", (curx, uid))
        conn.commit()
        txt, _ = profile_summary(uid)
        await q.edit_message_text("‚úÖ –í–∞–ª—é—Ç—É –æ–Ω–æ–≤–ª–µ–Ω–æ.\n\n" + (txt or ""), reply_markup=profile_menu_ikb())
        return MAIN

    if data == "profile:allpdf":
        cur.execute("""SELECT type, category, subcategory, amount, currency, comment
                       FROM transactions WHERE user_id=? ORDER BY date ASC, id ASC""", (uid,))
        rows = cur.fetchall()
        if not rows:
            await q.answer("–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É.", show_alert=True)
            return MAIN
        title = "–ü–æ–≤–Ω–∏–π –∑–≤—ñ—Ç –∑–∞ –≤—Å—ñ —Ä–æ–∫–∏"
        fname = "all_history.pdf"
        make_pdf(rows, title, fname)
        with open(fname, "rb") as f:
            await q.message.reply_document(InputFile(f, filename=fname), caption=title)
        await q.message.reply_text("–ì–æ—Ç–æ–≤–æ. –û–±–µ—Ä–∏ –Ω–∞—Å—Ç—É–ø–Ω—É –¥—ñ—é:", reply_markup=profile_menu_ikb())
        return MAIN

    # -------- –ì–†–ê --------
    if data == "quiz:start":
        # –ü–æ—è—Å–Ω–µ–Ω–Ω—è –≥—Ä–∏
        explain = (
            "üéÆ *–§—ñ–Ω–∞–Ω—Å–æ–≤–∞ –≥—Ä–∞–º–æ—Ç–Ω—ñ—Å—Ç—å ‚Äî –º—ñ–Ω—ñ-—Ç–µ—Å—Ç*\n"
            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            "‚Ä¢ 20 –∫–æ—Ä–æ—Ç–∫–∏—Ö –∑–∞–ø–∏—Ç–∞–Ω—å –∑ –≤–∞—Ä—ñ–∞–Ω—Ç–∞–º–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π (A/B/C/D)\n"
            "‚Ä¢ –ú–µ—Ç–∞ ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å–µ–±–µ –±–µ–∑ —Å—Ç—Ä–µ—Å—É\n"
            "‚Ä¢ –í –∫—ñ–Ω—Ü—ñ ‚Äî –ø—ñ–¥—Å—É–º–æ–∫, –±–∞–ª–∏ —ñ —Ä–æ–∑–±—ñ—Ä –ø–æ–º–∏–ª–æ–∫\n\n"
            "–ì–æ—Ç–æ–≤–∏–π? –ù–∞—Ç–∏—Å–Ω–∏ –±—É–¥—å-—è–∫—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å, –∫–æ–ª–∏ –∑‚Äô—è–≤–∏—Ç—å—Å—è –ø–µ—Ä—à–µ –ø–∏—Ç–∞–Ω–Ω—è üëá"
        )
        # —Å—Ñ–æ—Ä–º—É—î–º–æ —Ä–∞–Ω–¥–æ–º–Ω—ñ 20
        q_indexes = list(range(len(QUIZ_QUESTIONS_BASE)))
        random.shuffle(q_indexes)
        q_indexes = q_indexes[:20]
        context.user_data["quiz_idx_list"] = q_indexes
        context.user_data["quiz_pos"] = 0
        context.user_data["quiz_score"] = 0
        context.user_data["quiz_mistakes"] = []  # —Å–ø–∏—Å–∫–∏ (qtxt, chosen_letter, correct_letter)
        # –ø–æ–∫–∞–∑–∞—Ç–∏ –ø–µ—Ä—à–µ –ø–∏—Ç–∞–Ω–Ω—è
        await q.edit_message_text(explain, parse_mode="Markdown")
        return await quiz_ask_next(update, context)

    if data.startswith("quiz:ans:"):
        parts = data.split(":")
        qidx = int(parts[2])   # –ø–æ–∑–∏—Ü—ñ—è —É –ø–æ—Ç–æ—á–Ω—ñ–π –≥—Ä—ñ (0..19)
        choice = int(parts[3]) # 0..3

        pos = context.user_data.get("quiz_pos", 0)
        # –∑–∞—Ö–∏—Å—Ç: —è–∫—â–æ –Ω–∞—Ç–∏—Å–ª–∏ —Å—Ç–∞—Ä—É –∫–Ω–æ–ø–∫—É ‚Äî —ñ–≥–Ω–æ—Ä—É—î–º–æ
        if qidx != pos:
            await q.answer("–í—ñ–¥–ø–æ–≤—ñ–¥—å —É–∂–µ –ø—Ä–∏–π–Ω—è—Ç–∞, —Ä—É—Ö–∞—î–º–æ—Å—å –¥–∞–ª—ñ‚Ä¶")
            return QUIZ_ACTIVE

        # –æ—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è
        idx_list = context.user_data.get("quiz_idx_list", [])
        base_idx = idx_list[pos]
        item = QUIZ_QUESTIONS_BASE[base_idx]

        correct = item["ans"]
        letters = ["A", "B", "C", "D"]
        if choice == correct:
            context.user_data["quiz_score"] = context.user_data.get("quiz_score", 0) + 1
            await q.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
        else:
            context.user_data["quiz_mistakes"].append(
                (item["q"], letters[choice], letters[correct], item["opts"][correct])
            )
            await q.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ")

        # —Ä—É—Ö–∞—î–º–æ—Å—å –¥–∞–ª—ñ
        context.user_data["quiz_pos"] = pos + 1
        return await quiz_ask_next(update, context)

    # -------- –†–ï–ó–ï–†–í --------
    await q.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è.", show_alert=True)
    return MAIN

async def quiz_ask_next(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    qobj = update.callback_query
    pos = context.user_data.get("quiz_pos", 0)
    idx_list = context.user_data.get("quiz_idx_list", [])
    if pos >= len(idx_list):
        # —Ñ—ñ–Ω–∞–ª
        score = context.user_data.get("quiz_score", 0)
        mistakes = context.user_data.get("quiz_mistakes", [])
        total = len(idx_list)
        # —Ñ–æ—Ä–º—É—î–º–æ —Ä–æ–∑–±—ñ—Ä
        lines = [f"üéØ *–†–µ–∑—É–ª—å—Ç–∞—Ç*: {score}/{total} –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö\n"]
        if mistakes:
            lines.append("üßæ –î–µ —Ç–∏ –ø–æ–º–∏–ª–∏–≤—Å—è:")
            for (qt, ch, corr, corr_text) in mistakes:
                lines.append(f"‚Ä¢ {qt}\n   –¢–≤–æ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {ch}\n   –ü—Ä–∞–≤–∏–ª—å–Ω–∞: {corr} ‚Äî {corr_text}")
        else:
            lines.append("–Ü–¥–µ–∞–ª—å–Ω–æ! –ë–µ–∑ –∂–æ–¥–Ω–æ—ó –ø–æ–º–∏–ª–∫–∏ üî•")
        # –¥–æ–¥–∞–º–æ —Ü–∏—Ç–∞—Ç—É
        lines.append("\nüí° " + random.choice(TIPS))
        text = "\n".join(lines)
        await qobj.edit_message_text(text, parse_mode="Markdown", reply_markup=ikb([[("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", "main:open")]]))
        # –ø–æ—á–∏—Å—Ç–∏–º–æ —Å—Ç–µ–π—Ç –≥—Ä–∏
        context.user_data.pop("quiz_idx_list", None)
        context.user_data.pop("quiz_pos", None)
        context.user_data.pop("quiz_score", None)
        context.user_data.pop("quiz_mistakes", None)
        return MAIN

    # –≤–∏–≤–æ–¥–∏–º–æ –ø–∏—Ç–∞–Ω–Ω—è pos
    base_idx = idx_list[pos]
    item = QUIZ_QUESTIONS_BASE[base_idx]
    q_text = f"‚ùì *–ü–∏—Ç–∞–Ω–Ω—è {pos+1}/{len(idx_list)}*\n{item['q']}\n\n" + \
             f"A) {item['opts'][0]}\nB) {item['opts'][1]}\nC) {item['opts'][2]}\nD) {item['opts'][3]}"
    await qobj.message.reply_text(q_text, parse_mode="Markdown", reply_markup=quiz_answer_ikb(pos))
    return QUIZ_ACTIVE

# ===================== TEXT INPUT HANDLERS =====================
async def handle_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").replace(",", ".").strip()
    try:
        amount = float(text)
    except ValueError:
        await update.message.reply_text(
            "–°—É–º–∞ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑:",
            reply_markup=ikb([[("‚Ü©Ô∏è –ù–∞–∑–∞–¥", "back:cats"), ("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", "main:open")]])
        )
        return AMOUNT
    context.user_data["amount"] = amount
    await update.message.reply_text(
        "–î–æ–¥–∞–π –∫–æ–º–µ–Ω—Ç–∞—Ä –∞–±–æ '-' —è–∫—â–æ –±–µ–∑:",
        reply_markup=ikb([[("‚Ü©Ô∏è –ù–∞–∑–∞–¥", "back:cats"), ("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", "main:open")]])
    )
    return COMMENT

async def handle_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    comment = update.message.text
    if comment == "-":
        comment = None
    uid = update.effective_user.id
    u = get_user(uid)
    currency = u[2] if u else "–≥—Ä–Ω"
    tname = context.user_data.get("tname")
    cat = context.user_data.get("cat_name")
    sub = context.user_data.get("sub_name")
    amount = context.user_data.get("amount")
    if not all([tname, cat]) or amount is None:
        await update.message.reply_text("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–≤–µ—Ä—Ç–∞—é —É –º–µ–Ω—é.", reply_markup=main_menu_ikb())
        context.user_data.clear()
        return MAIN
    date_str = datetime.now().strftime("%Y-%m-%d")
    save_tx(uid, tname, cat, sub, amount, currency, comment, date_str)
    context.user_data.clear()
    await send_main_menu(update, context,
        f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {tname} ‚Üí {CATEGORY_EMOJI.get(cat,'')} {cat} ‚Üí {sub or '-'}\n"
        f"–°—É–º–∞: {amount:.2f} {currency}\n–î–∞—Ç–∞: {date_str}"
    )
    return MAIN

async def handle_profile_edit_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = (update.message.text or "").strip()
    if not name:
        await update.message.reply_text("–í–≤–µ–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω–µ —ñ–º‚Äô—è üôÇ",
                                        reply_markup=ikb([[("‚Ü©Ô∏è –ù–∞–∑–∞–¥", "back:main"), ("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", "main:open")]]))
        return PROFILE_EDIT_NAME
    cur.execute("UPDATE users SET name=? WHERE user_id=?", (name, update.effective_user.id))
    conn.commit()
    txt, _ = profile_summary(update.effective_user.id)
    await update.message.reply_text("‚úÖ –Ü–º‚Äô—è –æ–Ω–æ–≤–ª–µ–Ω–æ.\n\n" + (txt or ""), reply_markup=profile_menu_ikb())
    return MAIN

# ===================== APP =====================
def build_app():
    app = Application.builder().token(BOT_TOKEN).build()
    # JobQueue: –∞–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—É—Ä—Å—ñ–≤ —â–æ—Ö–≤–∏–ª–∏–Ω–∏
    app.job_queue.run_repeating(refresh_rates_job, interval=60, first=0)

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", cmd_start)],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_name),
                       CallbackQueryHandler(on_cb)],

            MAIN: [CallbackQueryHandler(on_cb)],

            AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_amount),
                     CallbackQueryHandler(on_cb)],

            COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_comment),
                      CallbackQueryHandler(on_cb)],

            STAT_YEAR_SELECT: [CallbackQueryHandler(on_cb)],
            STAT_MONTH_SELECT: [CallbackQueryHandler(on_cb)],
            STAT_DAY_SELECT: [CallbackQueryHandler(on_cb)],

            PROFILE_EDIT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_profile_edit_name),
                                CallbackQueryHandler(on_cb)],

            QUIZ_ACTIVE: [CallbackQueryHandler(on_cb)]
        },
        fallbacks=[CallbackQueryHandler(on_cb)],
        allow_reentry=True
    )

    app.add_handler(conv)
    return app

def main():
    app = build_app()
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
